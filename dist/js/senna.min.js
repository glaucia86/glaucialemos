/**
 * Senna.js - A blazing-fast Single Page Application engine
 * @author Liferay, Inc.
 * @version v2.3.1
 * @link http://sennajs.com
 * @license BSD-3-Clause
 */
!(function(e, t) {
  typeof exports === "object" && typeof module !== "undefined"
    ? t(exports)
    : typeof define === "function" && define.amd
    ? define(["exports"], t)
    : t((e.senna = e.senna || {}));
})(this, e => {
  function t() {
    throw Error("Unimplemented abstract method");
  }
  function n() {
    we = void 0;
  }
  function r() {
    const e =
      arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    we = e;
  }
  function i() {
    return (
      typeof window !== "undefined" &&
        window.__METAL_COMPATIBILITY__ &&
        r(window.__METAL_COMPATIBILITY__),
      we
    );
  }
  function a(e, t) {
    return e || t;
  }
  function o(e) {
    if (!e.name) {
      const t = e.toString();
      e.name = t.substring(9, t.indexOf("("));
    }
    return e.name;
  }
  function s(e, t, n) {
    const r = `${t}_MERGED`;
    if (!e.hasOwnProperty(r)) {
      let i = e.hasOwnProperty(t) ? e[t] : null;
      if (e.__proto__ && !e.__proto__.isPrototypeOf(Function)) {
        const o = n || a;
        i = o(i, s(e.__proto__, t, o));
      }
      e[r] = i;
    }
    return e[r];
  }
  function u(e, t) {
    if (e) {
      let n = e[Ae];
      return t && !e.hasOwnProperty(Ae) && (n = null), n || (e[Ae] = Ce++);
    }
    return Ce++;
  }
  function l(e) {
    return e;
  }
  function c(e) {
    return typeof e === "boolean";
  }
  function h(e) {
    return void 0 !== e;
  }
  function f(e) {
    return h(e) && !m(e);
  }
  function d(e) {
    return (
      e &&
      (typeof e === "undefined" ? "undefined" : _e(e)) === "object" &&
      e.nodeType === 9
    );
  }
  function v(e) {
    return (
      e &&
      (typeof e === "undefined" ? "undefined" : _e(e)) === "object" &&
      e.nodeType === 11
    );
  }
  function p(e) {
    return (
      e &&
      (typeof e === "undefined" ? "undefined" : _e(e)) === "object" &&
      e.nodeType === 1
    );
  }
  function y(e) {
    return typeof e === "function";
  }
  function m(e) {
    return e === null;
  }
  function _(e) {
    return typeof e === "number";
  }
  function g(e) {
    return e !== null && e === e.window;
  }
  function k(e) {
    const t = typeof e === "undefined" ? "undefined" : _e(e);
    return (t === "object" && e !== null) || t === "function";
  }
  function E(e) {
    return (
      e &&
      (typeof e === "undefined" ? "undefined" : _e(e)) === "object" &&
      typeof e.then === "function"
    );
  }
  function S(e) {
    return typeof e === "string" || e instanceof String;
  }
  function b() {}
  function P(e) {
    const t = document.createElement("a");
    if (((t.href = e), t.protocol === ":" || !/:/.test(t.href))) {
      throw new TypeError(`${e} is not a valid URL`);
    }
    return {
      hash: t.hash,
      hostname: t.hostname,
      password: t.password,
      pathname: t.pathname[0] === "/" ? t.pathname : `/${t.pathname}`,
      port: t.port,
      protocol: t.protocol,
      search: t.search,
      username: t.username
    };
  }
  function w(e) {
    if (y(URL) && URL.length) {
      const t = new URL(e);
      if (t.port && t.href.indexOf(t.port) === -1) {
        throw new TypeError(`${e} is not a valid URL`);
      }
      return t;
    }
    return P(e);
  }
  function C(e) {
    return (e = e || []), Array.isArray(e) ? e : [e];
  }
  function A(e, t) {
    if (k(e) && S(t)) {
      e.length || (e = [e]);
      for (let n = 0; n < e.length; n++)
        "classList" in e[n] ? L(e[n], t) : R(e[n], t);
    }
  }
  function L(e, t) {
    t.split(" ").forEach(t => {
      t && e.classList.add(t);
    });
  }
  function R(e, t) {
    const n = ` ${e.className} `;

    let r = "";
    t = t.split(" ");
    for (let i = 0; i < t.length; i++) {
      const a = t[i];
      n.indexOf(` ${a} `) === -1 && (r += ` ${a}`);
    }
    r && (e.className += r);
  }
  function T(e, t, n) {
    N(Ve.get(e, "listeners", {}), t, n);
  }
  function O(e, t, n, r) {
    const i = Ve.get(e, "delegating", {});
    N(i[t].selectors, n, r);
  }
  function N(e, t, n) {
    e[t] || (e[t] = []), e[t].push(n);
  }
  function I(e, t) {
    const n = Ve.get(e, "delegating", {});
    n[t] || (n[t] = { handle: W(e, t, q, !!nt[t]), selectors: {} });
  }
  function D(e, t) {
    for (; e && !B(e, t); ) e = e.parentNode;
    return e;
  }
  function H(e, t) {
    if ((S(t) && (t = U(t)), t instanceof NodeList)) {
      for (let n = Array.prototype.slice.call(t), r = 0; r < n.length; r++) {
        e.appendChild(n[r]);
      }
    } else e.appendChild(t);
    return t;
  }
  function U(e) {
    const t = document.createElement("div");
    (t.innerHTML = `<br>${e}`), t.removeChild(t.firstChild);
    for (var n = document.createDocumentFragment(); t.firstChild; ) {
      n.appendChild(t.firstChild);
    }
    return n;
  }
  function x(e, t) {
    return d(e) ? e.documentElement.contains(t) : e.contains(t);
  }
  function j(e, t, n, r, i) {
    const a = et[t];
    return (
      a && a.delegate && ((t = a.originalEvent), (r = a.handler.bind(a, r))),
      i && ((r = r.bind()), (r.defaultListener_ = !0)),
      I(e, t),
      S(n) ? O(e, t, n, r) : T(n, t, r),
      new Ke(S(n) ? e : n, t, r, S(n) ? n : null)
    );
  }
  function F(e, t, n) {
    if (n && t === "click" && n.button === 2) return !1;
    const r = ["BUTTON", "INPUT", "SELECT", "TEXTAREA", "FIELDSET"];
    return (
      !(t === "click" && r.indexOf(e.tagName) > -1) ||
      !(e.disabled || Y(e, "fieldset[disabled]"))
    );
  }
  function M(e) {
    e && e.parentNode && e.parentNode.removeChild(e);
  }
  function q(e) {
    V(e);
    let t = !0;

    const n = e.currentTarget;

    const r = [];
    return (
      (t &= re(n, e, r)),
      (t &= ne(r, e)),
      (e.delegateTarget = null),
      (e[tt] = n),
      t
    );
  }
  function B(e, t) {
    if (!e || e.nodeType !== 1) return !1;
    const n = Element.prototype;

    const r =
      n.matches ||
      n.webkitMatchesSelector ||
      n.mozMatchesSelector ||
      n.msMatchesSelector ||
      n.oMatchesSelector;
    return r ? r.call(e, t) : Q(e, t);
  }
  function Q(e, t) {
    for (
      let n = document.querySelectorAll(t, e.parentNode), r = 0;
      r < n.length;
      ++r
    ) {
      if (n[r] === e) return !0;
    }
    return !1;
  }
  function V(e) {
    (e.stopPropagation = ee), (e.stopImmediatePropagation = Z);
  }
  function W(e, t, n, r) {
    if (S(e)) return j(document, t, e, n);
    const i = et[t];
    return (
      i && i.event && ((t = i.originalEvent), (n = i.handler.bind(i, n))),
      e.addEventListener(t, n, r),
      new $e(e, t, n, r)
    );
  }
  function J(e, t, n) {
    var r = W(e, t, function() {
      return r.removeListener(), n.apply(this, arguments);
    });
    return r;
  }
  function Y(e, t) {
    return D(e.parentNode, t);
  }
  function z(e, t) {
    et[e] = t;
  }
  function G(e) {
    for (let t = void 0; (t = e.firstChild); ) e.removeChild(t);
  }
  function K(e, t) {
    if (k(e) && S(t)) {
      e.length || (e = [e]);
      for (let n = 0; n < e.length; n++)
        "classList" in e[n] ? $(e[n], t) : X(e[n], t);
    }
  }
  function $(e, t) {
    t.split(" ").forEach(t => {
      t && e.classList.remove(t);
    });
  }
  function X(e, t) {
    let n = ` ${e.className} `;
    t = t.split(" ");
    for (let r = 0; r < t.length; r++) n = n.replace(` ${t[r]} `, " ");
    e.className = n.trim();
  }
  function Z() {
    const e = this;
    (e.stopped = !0),
      (e.stoppedImmediate = !0),
      Event.prototype.stopImmediatePropagation.call(e);
  }
  function ee() {
    const e = this;
    (e.stopped = !0), Event.prototype.stopPropagation.call(e);
  }
  function te(e, t) {
    if (et[t]) return !0;
    S(e) && (Xe[e] || (Xe[e] = document.createElement(e)), (e = Xe[e]));
    const n = e.tagName;
    return (
      (Ze[n] && Ze[n].hasOwnProperty(t)) ||
        ((Ze[n] = Ze[n] || {}), (Ze[n][t] = `on${t}` in e)),
      Ze[n][t]
    );
  }
  function ne(e, t) {
    for (var n = !0, r = 0; r < e.length && !t.defaultPrevented; r++) {
      (t.delegateTarget = e[r].element), (n &= e[r].fn(t));
    }
    return n;
  }
  function re(e, t, n) {
    for (
      var r = !0, i = t.target, a = e.parentNode;
      i && i !== a && !t.stopped;

    ) {
      F(i, t.type, t) &&
        ((t.delegateTarget = i), (r &= ie(i, t, n)), (r &= oe(e, i, t, n))),
        (i = i.parentNode);
    }
    return r;
  }
  function ie(e, t, n) {
    const r = t[tt];
    if (!h(r) || !x(r, e)) {
      const i = Ve.get(e, "listeners", {})[t.type];
      return ae(i, t, e, n);
    }
    return !0;
  }
  function ae(e, t, n, r) {
    let i = !0;
    e = e || [];
    for (let a = 0; a < e.length && !t.stoppedImmediate; a++) {
      e[a].defaultListener_ ? r.push({ element: n, fn: e[a] }) : (i &= e[a](t));
    }
    return i;
  }
  function oe(e, t, n, r) {
    for (
      var i = !0,
        a = Ve.get(e, "delegating", {}),
        o = a[n.type].selectors,
        s = Object.keys(o),
        u = 0;
      u < s.length && !n.stoppedImmediate;
      u++
    ) {
      if (B(t, s[u])) {
        const l = o[s[u]];
        i &= ae(l, n, t, r);
      }
    }
    return i;
  }
  function se(e, t) {
    return function n() {
      const r = arguments;
      ue(n),
        (n.id = setTimeout(() => {
          e(...r);
        }, t));
    };
  }
  function ue(e) {
    clearTimeout(e.id);
  }
  function le(e) {
    return {
      match: e[0],
      prefix: e[1],
      name: e[2],
      paramPattern: e[3],
      unnamedPattern: e[4],
      modifier: e[5]
    };
  }
  function ce(e) {
    for (var t = "", n = 0; n < e.length; n++) {
      if (Le.isString(e[n])) t += fe(e[n]);
      else {
        let r = he(e[n].pattern);
        e[n].repeat && (r += `${he(`\\/${r}`)}*`),
          (r = `${fe(e[n].prefix)}(${r})`),
          e[n].optional && (e[n].partial || (r = he(r)), (r += "?")),
          (t += r);
      }
    }
    return new RegExp(`^${de(t)}$`);
  }
  function he(e) {
    return `(?:${e})`;
  }
  function fe(e) {
    return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g, "\\$1");
  }
  function de(e) {
    return (e += /\/$/.test(e) ? "?" : "\\/?");
  }
  function ve(e) {
    if (!Le.isString(e)) return e;
    for (var t = e, n = 0, r = [], i = "", a = 0, o = ht.exec(t); o; ) {
      const s = le(o);
      (i = t.slice(a, o.index)),
        (a = o.index + s.match.length),
        r.push(i),
        r.push({
          name: s.name ? s.name : `${n++}`,
          partial: t[a] && t[a] !== s.prefix,
          prefix: s.prefix || "",
          pattern: s.paramPattern || s.unnamedPattern || "[^\\/]+",
          repeat: s.modifier === "*" || s.modifier === "+",
          optional: s.modifier === "*" || s.modifier === "?"
        }),
        (o = ht.exec(t));
    }
    return a < t.length && r.push(t.substr(a)), r;
  }
  function pe(e) {
    return ce(ve(e));
  }
  function ye(e, t) {
    const n = {};

    const r = ve(e);

    const i = t.match(ce(r));
    if (!i) return null;
    for (let a = 1, o = 0; o < r.length; o++) {
      if (!Le.isString(r[o])) {
        let s = i[a++];
        Le.isDef(s) && (r[o].repeat && (s = s.split("/")), (n[r[o].name] = s));
      }
    }
    return n;
  }
  var me = me || {};
  typeof window !== "undefined" && (me.window = window),
    typeof document !== "undefined" && (me.document = document);
  var _e =
    typeof Symbol === "function" && typeof Symbol.iterator === "symbol"
      ? function(e) {
          return typeof e;
        }
      : function(e) {
          return e &&
            typeof Symbol === "function" &&
            e.constructor === Symbol &&
            e !== Symbol.prototype
            ? "symbol"
            : typeof e;
        };

  const ge = function(e, t) {
    if (!(e instanceof t)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  const ke = (function() {
    function e(e, t) {
      for (let n = 0; n < t.length; n++) {
        const r = t[n];
        (r.enumerable = r.enumerable || !1),
          (r.configurable = !0),
          "value" in r && (r.writable = !0),
          Object.defineProperty(e, r.key, r);
      }
    }
    return function(t, n, r) {
      return n && e(t.prototype, n), r && e(t, r), t;
    };
  })();

  const Ee = function Pt(e, t, n) {
    e === null && (e = Function.prototype);
    const r = Object.getOwnPropertyDescriptor(e, t);
    if (void 0 === r) {
      const i = Object.getPrototypeOf(e);
      return i === null ? void 0 : Pt(i, t, n);
    }
    if ("value" in r) return r.value;
    const a = r.get;
    if (void 0 !== a) return a.call(n);
  };

  const Se = function(e, t) {
    if (typeof t !== "function" && t !== null) {
      throw new TypeError(
        `Super expression must either be null or a function, not ${typeof t}`
      );
    }
    (e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    })),
      t &&
        (Object.setPrototypeOf
          ? Object.setPrototypeOf(e, t)
          : (e.__proto__ = t));
  };

  const be = function(e, t) {
    if (!e) {
      throw new ReferenceError(
        "this hasn't been initialised - super() hasn't been called"
      );
    }
    return !t || (typeof t !== "object" && typeof t !== "function") ? e : t;
  };

  const Pe = (function() {
    function e(e, t) {
      const n = [];

      let r = !0;

      let i = !1;

      let a = void 0;
      try {
        for (
          var o, s = e[Symbol.iterator]();
          !(r = (o = s.next()).done) && (n.push(o.value), !t || n.length !== t);
          r = !0
        );
      } catch (u) {
        (i = !0), (a = u);
      } finally {
        try {
          !r && s.return && s.return();
        } finally {
          if (i) throw a;
        }
      }
      return n;
    }
    return function(t, n) {
      if (Array.isArray(t)) return t;
      if (Symbol.iterator in Object(t)) return e(t, n);
      throw new TypeError(
        "Invalid attempt to destructure non-iterable instance"
      );
    };
  })();

  var we = void 0;

  var Ce = 1;

  var Ae = `core_${(1e9 * Math.random()) >>> 0}`;

  var Le = Object.freeze({
    UID_PROPERTY: Ae,
    abstractMethod: t,
    disableCompatibilityMode: n,
    enableCompatibilityMode: r,
    getCompatibilityModeData: i,
    getFunctionName: o,
    getStaticProperty: s,
    getUid: u,
    identityFunction: l,
    isBoolean: c,
    isDef: h,
    isDefAndNotNull: f,
    isDocument: d,
    isDocumentFragment: v,
    isElement: p,
    isFunction: y,
    isNull: m,
    isNumber: _,
    isWindow: g,
    isObject: k,
    isPromise: E,
    isString: S,
    nullFunction: b
  });

  const Re = (function() {
    function e() {
      ge(this, e);
    }
    return (
      ke(e, null, [
        {
          key: "equal",
          value(e, t) {
            if (e === t) return !0;
            if (e.length !== t.length) return !1;
            for (let n = 0; n < e.length; n++) if (e[n] !== t[n]) return !1;
            return !0;
          }
        },
        {
          key: "firstDefinedValue",
          value(e) {
            for (let t = 0; t < e.length; t++) {
              if (void 0 !== e[t]) return e[t];
            }
          }
        },
        {
          key: "flatten",
          value(t, n) {
            for (var r = n || [], i = 0; i < t.length; i++) {
              Array.isArray(t[i]) ? e.flatten(t[i], r) : r.push(t[i]);
            }
            return r;
          }
        },
        {
          key: "remove",
          value(t, n) {
            const r = t.indexOf(n);

            let i = void 0;
            return (i = r >= 0) && e.removeAt(t, r), i;
          }
        },
        {
          key: "removeAt",
          value(e, t) {
            return Array.prototype.splice.call(e, t, 1).length === 1;
          }
        },
        {
          key: "slice",
          value(e, t, n) {
            for (var r = [], i = h(n) ? n : e.length, a = t; a < i; a++) {
              r.push(e[a]);
            }
            return r;
          }
        }
      ]),
      e
    );
  })();

  const Te = {};
  (Te.throwException = function(e) {
    Te.nextTick(() => {
      throw e;
    });
  }),
    (Te.run = function(e, t) {
      Te.run.workQueueScheduled_ ||
        (Te.nextTick(Te.run.processWorkQueue),
        (Te.run.workQueueScheduled_ = !0)),
        Te.run.workQueue_.push(new Te.run.WorkItem_(e, t));
    }),
    (Te.run.workQueueScheduled_ = !1),
    (Te.run.workQueue_ = []),
    (Te.run.processWorkQueue = function() {
      for (; Te.run.workQueue_.length; ) {
        const e = Te.run.workQueue_;
        Te.run.workQueue_ = [];
        for (let t = 0; t < e.length; t++) {
          const n = e[t];
          try {
            n.fn.call(n.scope);
          } catch (r) {
            Te.throwException(r);
          }
        }
      }
      Te.run.workQueueScheduled_ = !1;
    }),
    (Te.run.WorkItem_ = function(e, t) {
      (this.fn = e), (this.scope = t);
    }),
    (Te.nextTick = function(e, t) {
      let n = e;
      return (
        t && (n = e.bind(t)),
        (n = Te.nextTick.wrapCallback_(n)),
        typeof setImmediate === "function"
          ? void setImmediate(n)
          : (Te.nextTick.setImmediate_ ||
              (Te.nextTick.setImmediate_ = Te.nextTick.getSetImmediateEmulator_()),
            void Te.nextTick.setImmediate_(n))
      );
    }),
    (Te.nextTick.setImmediate_ = null),
    (Te.nextTick.getSetImmediateEmulator_ = function() {
      let e = void 0;
      if (
        (typeof MessageChannel === "function" && (e = MessageChannel),
        typeof e === "undefined" &&
          typeof window !== "undefined" &&
          window.postMessage &&
          window.addEventListener &&
          (e = function() {
            const e = document.createElement("iframe");
            (e.style.display = "none"),
              (e.src = ""),
              document.documentElement.appendChild(e);
            const t = e.contentWindow;

            const n = t.document;
            n.open(), n.write(""), n.close();
            const r = `callImmediate${Math.random()}`;

            const i = `${t.location.protocol}//${t.location.host}`;

            const a = function(e) {
              (e.origin !== i && e.data !== r) || this.port1.onmessage();
            }.bind(this);
            t.addEventListener("message", a, !1),
              (this.port1 = {}),
              (this.port2 = {
                postMessage() {
                  t.postMessage(r, i);
                }
              });
          }),
        typeof e !== "undefined")
      ) {
        const t = new e();

        let n = {};

        let r = n;
        return (
          (t.port1.onmessage = function() {
            n = n.next;
            const e = n.cb;
            (n.cb = null), e();
          }),
          function(e) {
            (r.next = { cb: e }), (r = r.next), t.port2.postMessage(0);
          }
        );
      }
      return typeof document !== "undefined" &&
        "onreadystatechange" in document.createElement("script")
        ? function(e) {
            let t = document.createElement("script");
            (t.onreadystatechange = function() {
              (t.onreadystatechange = null),
                t.parentNode.removeChild(t),
                (t = null),
                e(),
                (e = null);
            }),
              document.documentElement.appendChild(t);
          }
        : function(e) {
            setTimeout(e, 0);
          };
    }),
    (Te.nextTick.wrapCallback_ = function(e) {
      return e;
    });
  const Oe = (function() {
    function e() {
      ge(this, e), (this.disposed_ = !1);
    }
    return (
      ke(e, [
        {
          key: "dispose",
          value() {
            this.disposed_ || (this.disposeInternal(), (this.disposed_ = !0));
          }
        },
        { key: "disposeInternal", value() {} },
        {
          key: "isDisposed",
          value() {
            return this.disposed_;
          }
        }
      ]),
      e
    );
  })();

  const Ne = (function() {
    function e() {
      ge(this, e);
    }
    return (
      ke(e, null, [
        {
          key: "mixin",
          value(e) {
            for (let t = void 0, n = void 0, r = 1; r < arguments.length; r++) {
              n = arguments[r];
              for (t in n) e[t] = n[t];
            }
            return e;
          }
        },
        {
          key: "getObjectByName",
          value(e, t) {
            const n = t || window;

            const r = e.split(".");
            return r.reduce((e, t) => e[t], n);
          }
        },
        {
          key: "map",
          value(e, t) {
            for (var n = {}, r = Object.keys(e), i = 0; i < r.length; i++) {
              n[r[i]] = t(r[i], e[r[i]]);
            }
            return n;
          }
        },
        {
          key: "shallowEqual",
          value(e, t) {
            if (e === t) return !0;
            const n = Object.keys(e);

            const r = Object.keys(t);
            if (n.length !== r.length) return !1;
            for (let i = 0; i < n.length; i++) {
              if (e[n[i]] !== t[n[i]]) return !1;
            }
            return !0;
          }
        }
      ]),
      e
    );
  })();

  const Ie = (function() {
    function e() {
      ge(this, e);
    }
    return (
      ke(e, null, [
        {
          key: "caseInsensitiveCompare",
          value(e, t) {
            const n = String(e).toLowerCase();

            const r = String(t).toLowerCase();
            return n < r ? -1 : n === r ? 0 : 1;
          }
        },
        {
          key: "collapseBreakingSpaces",
          value(e) {
            return e
              .replace(/[\t\r\n ]+/g, " ")
              .replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
          }
        },
        {
          key: "escapeRegex",
          value(e) {
            return String(e)
              .replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1")
              .replace(/\x08/g, "\\x08");
          }
        },
        {
          key: "getRandomString",
          value() {
            const e = 2147483648;
            return (
              Math.floor(Math.random() * e).toString(36) +
              Math.abs(Math.floor(Math.random() * e) ^ Date.now()).toString(36)
            );
          }
        },
        {
          key: "hashCode",
          value(e) {
            for (var t = 0, n = 0, r = e.length; n < r; n++) {
              (t = 31 * t + e.charCodeAt(n)), (t %= 4294967296);
            }
            return t;
          }
        },
        {
          key: "replaceInterval",
          value(e, t, n, r) {
            return e.substring(0, t) + r + e.substring(n);
          }
        }
      ]),
      e
    );
  })();

  const De = Object.create;

  const He = (function(e) {
    function t() {
      ge(this, t);
      const e = be(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
      return (e.keys = De(null)), (e.values = De(null)), e;
    }
    return (
      Se(t, e),
      ke(
        t,
        [
          {
            key: "add",
            value(e, t) {
              return (
                (this.keys[e.toLowerCase()] = e),
                (this.values[e.toLowerCase()] =
                  this.values[e.toLowerCase()] || []),
                this.values[e.toLowerCase()].push(t),
                this
              );
            }
          },
          {
            key: "clear",
            value() {
              return (this.keys = De(null)), (this.values = De(null)), this;
            }
          },
          {
            key: "contains",
            value(e) {
              return e.toLowerCase() in this.values;
            }
          },
          {
            key: "disposeInternal",
            value() {
              this.values = null;
            }
          },
          {
            key: "get",
            value(e) {
              const t = this.values[e.toLowerCase()];
              if (t) return t[0];
            }
          },
          {
            key: "getAll",
            value(e) {
              return this.values[e.toLowerCase()];
            }
          },
          {
            key: "isEmpty",
            value() {
              return this.size() === 0;
            }
          },
          {
            key: "names",
            value() {
              const e = this;
              return Object.keys(this.values).map(t => e.keys[t]);
            }
          },
          {
            key: "remove",
            value(e) {
              return (
                delete this.keys[e.toLowerCase()],
                delete this.values[e.toLowerCase()],
                this
              );
            }
          },
          {
            key: "set",
            value(e, t) {
              return (
                (this.keys[e.toLowerCase()] = e),
                (this.values[e.toLowerCase()] = [t]),
                this
              );
            }
          },
          {
            key: "size",
            value() {
              return this.names().length;
            }
          },
          {
            key: "toString",
            value() {
              return JSON.stringify(this.values);
            }
          }
        ],
        [
          {
            key: "fromObject",
            value(e) {
              for (
                var n = new t(), r = Object.keys(e), i = 0;
                i < r.length;
                i++
              ) {
                n.set(r[i], e[r[i]]);
              }
              return n;
            }
          }
        ]
      ),
      t
    );
  })(Oe);

  const Ue = (function() {
    function e(t) {
      ge(this, e),
        (this.value_ = t),
        (this.parent_ = null),
        (this.children_ = null);
    }
    return (
      ke(e, [
        {
          key: "addChild",
          value(e) {
            xe(e),
              e.setParent(this),
              (this.children_ = this.children_ || []),
              this.children_.push(e);
          }
        },
        {
          key: "contains",
          value(e) {
            for (let t = e.getParent(); t; ) {
              if (t === this) return !0;
              t = t.getParent();
            }
            return !1;
          }
        },
        {
          key: "getAncestors",
          value() {
            for (var e = [], t = this.getParent(); t; ) {
              e.push(t), (t = t.getParent());
            }
            return e;
          }
        },
        {
          key: "getChildAt",
          value(e) {
            return this.getChildren()[e] || null;
          }
        },
        {
          key: "getChildren",
          value() {
            return this.children_ || e.EMPTY_ARRAY;
          }
        },
        {
          key: "getChildCount",
          value() {
            return this.getChildren().length;
          }
        },
        {
          key: "getDepth",
          value() {
            for (var e = 0, t = this; t.getParent(); ) {
              e++, (t = t.getParent());
            }
            return e;
          }
        },
        {
          key: "getParent",
          value() {
            return this.parent_;
          }
        },
        {
          key: "getRoot",
          value() {
            for (var e = this; e.getParent(); ) e = e.getParent();
            return e;
          }
        },
        {
          key: "getValue",
          value() {
            return this.value_;
          }
        },
        {
          key: "isLeaf",
          value() {
            return !this.getChildCount();
          }
        },
        {
          key: "removeChild",
          value(e) {
            return Re.remove(this.getChildren(), e) ? e : null;
          }
        },
        {
          key: "setParent",
          value(e) {
            this.parent_ = e;
          }
        },
        {
          key: "traverse",
          value(e, t) {
            e && e(this),
              this.getChildren().forEach(n => n.traverse(e, t)),
              t && t(this);
          }
        }
      ]),
      e
    );
  })();
  Ue.EMPTY_ARRAY = [];
  var xe = function(e) {
    if (e.getParent()) throw new Error("Cannot add child with parent.");
  };

  let je = w;

  const Fe = (function() {
    function e() {
      const t =
        arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
      ge(this, e), (this.url = e.parse(this.maybeAddProtocolAndHostname_(t)));
    }
    return (
      ke(
        e,
        [
          {
            key: "addParametersFromMultiMap",
            value(e) {
              const t = this;
              return (
                e.names().forEach(n => {
                  e.getAll(n).forEach(e => {
                    t.addParameterValue(n, e);
                  });
                }),
                this
              );
            }
          },
          {
            key: "addParameterValue",
            value(e, t) {
              return (
                this.ensureQueryInitialized_(),
                h(t) && (t = String(t)),
                this.query.add(e, t),
                this
              );
            }
          },
          {
            key: "addParameterValues",
            value(e, t) {
              const n = this;
              return t.forEach(t => n.addParameterValue(e, t)), this;
            }
          },
          {
            key: "ensureQueryInitialized_",
            value() {
              const t = this;
              if (!this.query) {
                this.query = new He();
                const n = this.url.search;
                n &&
                  n
                    .substring(1)
                    .split("&")
                    .forEach(n => {
                      const r = n.split("=");

                      const i = Pe(r, 2);

                      const a = i[0];

                      let o = i[1];
                      h(o) && (o = e.urlDecode(o)), t.addParameterValue(a, o);
                    });
              }
            }
          },
          {
            key: "getHash",
            value() {
              return this.url.hash || "";
            }
          },
          {
            key: "getHost",
            value() {
              let e = this.getHostname();
              if (e) {
                const t = this.getPort();
                t && t !== "80" && (e += `:${t}`);
              }
              return e;
            }
          },
          {
            key: "getHostname",
            value() {
              const t = this.url.hostname;
              return t === e.HOSTNAME_PLACEHOLDER ? "" : t;
            }
          },
          {
            key: "getOrigin",
            value() {
              const e = this.getHost();
              return e ? `${this.getProtocol()}//${e}` : "";
            }
          },
          {
            key: "getParameterValue",
            value(e) {
              return this.ensureQueryInitialized_(), this.query.get(e);
            }
          },
          {
            key: "getParameterValues",
            value(e) {
              return this.ensureQueryInitialized_(), this.query.getAll(e);
            }
          },
          {
            key: "getParameterNames",
            value() {
              return this.ensureQueryInitialized_(), this.query.names();
            }
          },
          {
            key: "getPathname",
            value() {
              return this.url.pathname;
            }
          },
          {
            key: "getPort",
            value() {
              return this.url.port;
            }
          },
          {
            key: "getProtocol",
            value() {
              return this.url.protocol;
            }
          },
          {
            key: "getSearch",
            value() {
              const e = this;

              let t = "";

              let n = "";
              return (
                this.getParameterNames().forEach(t => {
                  e.getParameterValues(t).forEach(e => {
                    (n += t),
                      h(e) && (n += `=${encodeURIComponent(e)}`),
                      (n += "&");
                  });
                }),
                (n = n.slice(0, -1)),
                n && (t += `?${n}`),
                t
              );
            }
          },
          {
            key: "hasParameter",
            value(e) {
              return this.ensureQueryInitialized_(), this.query.contains(e);
            }
          },
          {
            key: "makeUnique",
            value() {
              return (
                this.setParameterValue(e.RANDOM_PARAM, Ie.getRandomString()),
                this
              );
            }
          },
          {
            key: "maybeAddProtocolAndHostname_",
            value(t) {
              let n = t;
              if (t.indexOf("://") === -1 && t.indexOf("javascript:") !== 0) {
                switch (
                  ((n = e.DEFAULT_PROTOCOL),
                  (t[0] === "/" && t[1] === "/") || (n += "//"),
                  t.charAt(0))
                ) {
                  case ".":
                  case "?":
                  case "#":
                    (n += e.HOSTNAME_PLACEHOLDER), (n += "/"), (n += t);
                    break;
                  case "":
                  case "/":
                    t[1] !== "/" && (n += e.HOSTNAME_PLACEHOLDER), (n += t);
                    break;
                  default:
                    n += t;
                }
              }
              return n;
            }
          },
          {
            key: "removeParameter",
            value(e) {
              return this.ensureQueryInitialized_(), this.query.remove(e), this;
            }
          },
          {
            key: "removeUnique",
            value() {
              return this.removeParameter(e.RANDOM_PARAM), this;
            }
          },
          {
            key: "setHash",
            value(e) {
              return (this.url.hash = e), this;
            }
          },
          {
            key: "setHostname",
            value(e) {
              return (this.url.hostname = e), this;
            }
          },
          {
            key: "setParameterValue",
            value(e, t) {
              return (
                this.removeParameter(e), this.addParameterValue(e, t), this
              );
            }
          },
          {
            key: "setParameterValues",
            value(e, t) {
              const n = this;
              return (
                this.removeParameter(e),
                t.forEach(t => n.addParameterValue(e, t)),
                this
              );
            }
          },
          {
            key: "setPathname",
            value(e) {
              return (this.url.pathname = e), this;
            }
          },
          {
            key: "setPort",
            value(e) {
              return (this.url.port = e), this;
            }
          },
          {
            key: "setProtocol",
            value(e) {
              return (
                (this.url.protocol = e),
                this.url.protocol[this.url.protocol.length - 1] !== ":" &&
                  (this.url.protocol += ":"),
                this
              );
            }
          },
          {
            key: "toString",
            value() {
              let e = "";

              const t = this.getHost();
              return (
                t && (e += `${this.getProtocol()}//`),
                (e +=
                  t + this.getPathname() + this.getSearch() + this.getHash())
              );
            }
          }
        ],
        [
          {
            key: "getParseFn",
            value() {
              return je;
            }
          },
          {
            key: "parse",
            value(e) {
              return je(e);
            }
          },
          {
            key: "setParseFn",
            value(e) {
              je = e;
            }
          },
          {
            key: "joinPaths",
            value(e) {
              for (
                var t = arguments.length, n = Array(t > 1 ? t - 1 : 0), r = 1;
                r < t;
                r++
              ) {
                n[r - 1] = arguments[r];
              }
              return (
                e.charAt(e.length - 1) === "/" &&
                  (e = e.substring(0, e.length - 1)),
                (n = n.map(e => (e.charAt(0) === "/" ? e.substring(1) : e))),
                [e]
                  .concat(n)
                  .join("/")
                  .replace(/\/$/, "")
              );
            }
          },
          {
            key: "urlDecode",
            value(e) {
              return decodeURIComponent(e.replace(/\+/g, " "));
            }
          }
        ]
      ),
      e
    );
  })();

  const Me = function() {
    return (
      typeof window !== "undefined" &&
      window.location &&
      window.location.protocol &&
      window.location.protocol.indexOf("https") === 0
    );
  };
  (Fe.DEFAULT_PROTOCOL = Me() ? "https:" : "http:"),
    (Fe.HOSTNAME_PLACEHOLDER = `hostname${Date.now()}`),
    (Fe.RANDOM_PARAM = "zx");
  const qe = (function() {
    function e() {
      ge(this, e);
    }
    return (
      ke(e, null, [
        {
          key: "copyNodeAttributes",
          value(e, t) {
            Array.prototype.slice
              .call(e.attributes)
              .forEach(e => t.setAttribute(e.name, e.value));
          }
        },
        {
          key: "getCurrentBrowserPath",
          value() {
            return (
              this.getCurrentBrowserPathWithoutHash() + me.window.location.hash
            );
          }
        },
        {
          key: "getCurrentBrowserPathWithoutHash",
          value() {
            return me.window.location.pathname + me.window.location.search;
          }
        },
        {
          key: "getUrlPath",
          value(e) {
            const t = new Fe(e);
            return t.getPathname() + t.getSearch() + t.getHash();
          }
        },
        {
          key: "getUrlPathWithoutHash",
          value(e) {
            const t = new Fe(e);
            return t.getPathname() + t.getSearch();
          }
        },
        {
          key: "getUrlPathWithoutHashAndSearch",
          value(e) {
            const t = new Fe(e);
            return t.getPathname();
          }
        },
        {
          key: "isCurrentBrowserPath",
          value(t) {
            if (t) {
              const n = this.getCurrentBrowserPathWithoutHash();
              return e.getUrlPathWithoutHash(t) === this.getUrlPath(n);
            }
            return !1;
          }
        },
        {
          key: "isHtml5HistorySupported",
          value() {
            return !(!me.window.history || !me.window.history.pushState);
          }
        },
        {
          key: "isWebUri",
          value(e) {
            try {
              return new Fe(e);
            } catch (t) {
              return !1;
            }
          }
        },
        {
          key: "clearNodeAttributes",
          value(e) {
            Array.prototype.slice
              .call(e.attributes)
              .forEach(t => e.removeAttribute(t.name));
          }
        },
        {
          key: "removePathTrailingSlash",
          value(e) {
            const t = e ? e.length : 0;
            return t > 1 && e[t - 1] === "/" && (e = e.substr(0, t - 1)), e;
          }
        }
      ]),
      e
    );
  })();

  const Be = {
    basePath: "data-senna-base-path",
    linkSelector: "data-senna-link-selector",
    loadingCssClass: "data-senna-loading-css-class",
    senna: "data-senna",
    dispatch: "data-senna-dispatch",
    surface: "data-senna-surface",
    updateScrollPosition: "data-senna-update-scroll-position"
  };

  const Qe = "__metal_data__";

  var Ve = (function() {
    function e() {
      ge(this, e);
    }
    return (
      ke(e, null, [
        {
          key: "get",
          value(e, t, n) {
            return (
              e[Qe] || (e[Qe] = {}),
              t ? (!e[Qe][t] && n && (e[Qe][t] = n), e[Qe][t]) : e[Qe]
            );
          }
        },
        {
          key: "has",
          value(e) {
            return !!e[Qe];
          }
        }
      ]),
      e
    );
  })();

  const We = (function(e) {
    function t(e, n, r) {
      ge(this, t);
      const i = be(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
      return (i.emitter_ = e), (i.event_ = n), (i.listener_ = r), i;
    }
    return (
      Se(t, e),
      ke(t, [
        {
          key: "disposeInternal",
          value() {
            this.removeListener(),
              (this.emitter_ = null),
              (this.listener_ = null);
          }
        },
        {
          key: "removeListener",
          value() {
            this.emitter_.isDisposed() ||
              this.emitter_.removeListener(this.event_, this.listener_);
          }
        }
      ]),
      t
    );
  })(Oe);

  const Je = [0];

  const Ye = (function(e) {
    function t() {
      ge(this, t);
      const e = be(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
      return (
        (e.events_ = null),
        (e.listenerHandlers_ = null),
        (e.shouldUseFacade_ = !1),
        e
      );
    }
    return (
      Se(t, e),
      ke(t, [
        {
          key: "addHandler_",
          value(e, t) {
            return e ? (Array.isArray(e) || (e = [e]), e.push(t)) : (e = t), e;
          }
        },
        {
          key: "addListener",
          value(e, t, n) {
            this.validateListener_(t);
            for (let r = this.toEventsArray_(e), i = 0; i < r.length; i++) {
              this.addSingleListener_(r[i], t, n);
            }
            return new We(this, e, t);
          }
        },
        {
          key: "addSingleListener_",
          value(e, t, n, r) {
            this.runListenerHandlers_(e),
              (n || r) && (t = { default: n, fn: t, origin: r }),
              (this.events_ = this.events_ || {}),
              (this.events_[e] = this.addHandler_(this.events_[e], t));
          }
        },
        {
          key: "buildFacade_",
          value(e) {
            if (this.getShouldUseFacade()) {
              var t = {
                preventDefault() {
                  t.preventedDefault = !0;
                },
                target: this,
                type: e
              };
              return t;
            }
          }
        },
        {
          key: "disposeInternal",
          value() {
            this.events_ = null;
          }
        },
        {
          key: "emit",
          value(e) {
            const t = this.getRawListeners_(e);
            if (t.length === 0) return !1;
            const n = Re.slice(arguments, 1);
            return this.runListeners_(t, n, this.buildFacade_(e)), !0;
          }
        },
        {
          key: "getRawListeners_",
          value(e) {
            const t = C(this.events_ && this.events_[e]);
            return t.concat(C(this.events_ && this.events_["*"]));
          }
        },
        {
          key: "getShouldUseFacade",
          value() {
            return this.shouldUseFacade_;
          }
        },
        {
          key: "listeners",
          value(e) {
            return this.getRawListeners_(e).map(e => (e.fn ? e.fn : e));
          }
        },
        {
          key: "many",
          value(e, t, n) {
            for (let r = this.toEventsArray_(e), i = 0; i < r.length; i++) {
              this.many_(r[i], t, n);
            }
            return new We(this, e, n);
          }
        },
        {
          key: "many_",
          value(e, t, n) {
            function r() {
              --t === 0 && i.removeListener(e, r), n.apply(i, arguments);
            }
            var i = this;
            t <= 0 || i.addSingleListener_(e, r, !1, n);
          }
        },
        {
          key: "matchesListener_",
          value(e, t) {
            const n = e.fn || e;
            return n === t || (e.origin && e.origin === t);
          }
        },
        {
          key: "off",
          value(e, t) {
            if ((this.validateListener_(t), !this.events_)) return this;
            for (let n = this.toEventsArray_(e), r = 0; r < n.length; r++) {
              this.events_[n[r]] = this.removeMatchingListenerObjs_(
                C(this.events_[n[r]]),
                t
              );
            }
            return this;
          }
        },
        {
          key: "on",
          value() {
            return this.addListener.apply(this, arguments);
          }
        },
        {
          key: "onListener",
          value(e) {
            this.listenerHandlers_ = this.addHandler_(
              this.listenerHandlers_,
              e
            );
          }
        },
        {
          key: "once",
          value(e, t) {
            return this.many(e, 1, t);
          }
        },
        {
          key: "removeAllListeners",
          value(e) {
            if (this.events_) {
              if (e) {
                for (let t = this.toEventsArray_(e), n = 0; n < t.length; n++) {
                  this.events_[t[n]] = null;
                }
              } else this.events_ = null;
            }
            return this;
          }
        },
        {
          key: "removeMatchingListenerObjs_",
          value(e, t) {
            for (var n = [], r = 0; r < e.length; r++) {
              this.matchesListener_(e[r], t) || n.push(e[r]);
            }
            return n.length > 0 ? n : null;
          }
        },
        {
          key: "removeListener",
          value() {
            return this.off.apply(this, arguments);
          }
        },
        {
          key: "runListenerHandlers_",
          value(e) {
            let t = this.listenerHandlers_;
            if (t) {
              t = C(t);
              for (let n = 0; n < t.length; n++) t[n](e);
            }
          }
        },
        {
          key: "runListeners_",
          value(e, t, n) {
            n && t.push(n);
            for (var r = [], i = 0; i < e.length; i++) {
              const a = e[i].fn || e[i];
              e[i].default ? r.push(a) : a.apply(this, t);
            }
            if (!n || !n.preventedDefault) {
              for (let o = 0; o < r.length; o++) r[o].apply(this, t);
            }
          }
        },
        {
          key: "setShouldUseFacade",
          value(e) {
            return (this.shouldUseFacade_ = e), this;
          }
        },
        {
          key: "toEventsArray_",
          value(e) {
            return S(e) && ((Je[0] = e), (e = Je)), e;
          }
        },
        {
          key: "validateListener_",
          value(e) {
            if (!y(e)) throw new TypeError("Listener must be a function");
          }
        }
      ]),
      t
    );
  })(Oe);

  const ze = (function(e) {
    function t(e, n, r, i) {
      ge(this, t);
      const a = be(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
      return (
        (a.blacklist_ = r),
        (a.originEmitter_ = e),
        (a.pendingEvents_ = null),
        (a.proxiedEvents_ = null),
        (a.targetEmitter_ = n),
        (a.whitelist_ = i),
        a.startProxy_(),
        a
      );
    }
    return (
      Se(t, e),
      ke(t, [
        {
          key: "addListener_",
          value(e, t) {
            return this.originEmitter_.on(e, t);
          }
        },
        {
          key: "disposeInternal",
          value() {
            this.removeListeners_(),
              (this.proxiedEvents_ = null),
              (this.originEmitter_ = null),
              (this.targetEmitter_ = null);
          }
        },
        {
          key: "emitOnTarget_",
          value() {
            this.targetEmitter_.emit.apply(this.targetEmitter_, arguments);
          }
        },
        {
          key: "proxyEvent",
          value(e) {
            this.shouldProxyEvent_(e) && this.tryToAddListener_(e);
          }
        },
        {
          key: "removeListeners_",
          value() {
            if (this.proxiedEvents_) {
              for (
                let e = Object.keys(this.proxiedEvents_), t = 0;
                t < e.length;
                t++
              ) {
                this.proxiedEvents_[e[t]].removeListener();
              }
              this.proxiedEvents_ = null;
            }
            this.pendingEvents_ = null;
          }
        },
        {
          key: "setOriginEmitter",
          value(e) {
            const t = this;

            const n =
              this.originEmitter_ && this.proxiedEvents_
                ? Object.keys(this.proxiedEvents_)
                : this.pendingEvents_;
            (this.originEmitter_ = e),
              n && (this.removeListeners_(), n.forEach(e => t.proxyEvent(e)));
          }
        },
        {
          key: "shouldProxyEvent_",
          value(e) {
            return (
              !(this.whitelist_ && !this.whitelist_[e]) &&
              ((!this.blacklist_ || !this.blacklist_[e]) &&
                (!this.proxiedEvents_ || !this.proxiedEvents_[e]))
            );
          }
        },
        {
          key: "startProxy_",
          value() {
            this.targetEmitter_.onListener(this.proxyEvent.bind(this));
          }
        },
        {
          key: "tryToAddListener_",
          value(e) {
            this.originEmitter_
              ? ((this.proxiedEvents_ = this.proxiedEvents_ || {}),
                (this.proxiedEvents_[e] = this.addListener_(
                  e,
                  this.emitOnTarget_.bind(this, e)
                )))
              : ((this.pendingEvents_ = this.pendingEvents_ || []),
                this.pendingEvents_.push(e));
          }
        }
      ]),
      t
    );
  })(Oe);

  const Ge = (function(e) {
    function t() {
      ge(this, t);
      const e = be(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
      return (e.eventHandles_ = []), e;
    }
    return (
      Se(t, e),
      ke(t, [
        {
          key: "add",
          value() {
            for (let e = 0; e < arguments.length; e++) {
              this.eventHandles_.push(arguments[e]);
            }
          }
        },
        {
          key: "disposeInternal",
          value() {
            this.eventHandles_ = null;
          }
        },
        {
          key: "removeAllListeners",
          value() {
            for (let e = 0; e < this.eventHandles_.length; e++) {
              this.eventHandles_[e].removeListener();
            }
            this.eventHandles_ = [];
          }
        }
      ]),
      t
    );
  })(Oe);

  var Ke = (function(e) {
    function t(e, n, r, i) {
      ge(this, t);
      const a = be(
        this,
        (t.__proto__ || Object.getPrototypeOf(t)).call(this, e, n, r)
      );
      return (a.selector_ = i), a;
    }
    return (
      Se(t, e),
      ke(t, [
        {
          key: "removeListener",
          value() {
            const e = Ve.get(this.emitter_, "delegating", {});

            const t = Ve.get(this.emitter_, "listeners", {});

            const n = this.selector_;

            const r = S(n) ? e[this.event_].selectors : t;

            const i = S(n) ? n : this.event_;
            Re.remove(r[i] || [], this.listener_),
              r[i] && r[i].length === 0 && delete r[i];
          }
        }
      ]),
      t
    );
  })(We);

  var $e = (function(e) {
    function t(e, n, r, i) {
      ge(this, t);
      const a = be(
        this,
        (t.__proto__ || Object.getPrototypeOf(t)).call(this, e, n, r)
      );
      return (a.capture_ = i), a;
    }
    return (
      Se(t, e),
      ke(t, [
        {
          key: "removeListener",
          value() {
            this.emitter_.removeEventListener(
              this.event_,
              this.listener_,
              this.capture_
            );
          }
        }
      ]),
      t
    );
  })(We);

  var Xe = {};

  var Ze = {};

  var et = {};

  var tt = "__metal_last_container__";

  var nt = {
    blur: !0,
    error: !0,
    focus: !0,
    invalid: !0,
    load: !0,
    scroll: !0
  };

  const rt = ((function(e) {
    function t() {
      return (
        ge(this, t),
        be(
          this,
          (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments)
        )
      );
    }
    return (
      Se(t, e),
      ke(t, [
        {
          key: "addListener_",
          value(e, n) {
            if (this.originEmitter_.addEventListener) {
              if (this.isDelegateEvent_(e)) {
                const r = e.indexOf(":", 9);

                const i = e.substring(9, r);

                const a = e.substring(r + 1);
                return j(this.originEmitter_, i, a, n);
              }
              return W(this.originEmitter_, e, n);
            }
            return Ee(
              t.prototype.__proto__ || Object.getPrototypeOf(t.prototype),
              "addListener_",
              this
            ).call(this, e, n);
          }
        },
        {
          key: "isDelegateEvent_",
          value(e) {
            return e.substr(0, 9) === "delegate:";
          }
        },
        {
          key: "isSupportedDomEvent_",
          value(e) {
            return (
              !this.originEmitter_ ||
              !this.originEmitter_.addEventListener ||
              ((this.isDelegateEvent_(e) && e.indexOf(":", 9) !== -1) ||
                te(this.originEmitter_, e))
            );
          }
        },
        {
          key: "shouldProxyEvent_",
          value(e) {
            return (
              Ee(
                t.prototype.__proto__ || Object.getPrototypeOf(t.prototype),
                "shouldProxyEvent_",
                this
              ).call(this, e) && this.isSupportedDomEvent_(e)
            );
          }
        }
      ]),
      t
    );
  })(ze),
  (function() {
    function e() {
      ge(this, e);
    }
    return (
      ke(e, null, [
        {
          key: "checkAnimationEventName",
          value() {
            return (
              void 0 === e.animationEventName_ &&
                (e.animationEventName_ = {
                  animation: e.checkAnimationEventName_("animation"),
                  transition: e.checkAnimationEventName_("transition")
                }),
              e.animationEventName_
            );
          }
        },
        {
          key: "checkAnimationEventName_",
          value(t) {
            for (
              let n = ["Webkit", "MS", "O", ""],
                r = Ie.replaceInterval(
                  t,
                  0,
                  1,
                  t.substring(0, 1).toUpperCase()
                ),
                i = [`${r}End`, `${r}End`, `${r}End`, `${t}end`],
                a = 0;
              a < n.length;
              a++
            ) {
              if (void 0 !== e.animationElement_.style[n[a] + r]) {
                return n[a].toLowerCase() + i[a];
              }
            }
            return `${t}end`;
          }
        },
        {
          key: "checkAttrOrderChange",
          value() {
            if (void 0 === e.attrOrderChange_) {
              const t = '<div data-component="" data-ref=""></div>';

              const n = document.createElement("div");
              H(n, t), (e.attrOrderChange_ = t !== n.innerHTML);
            }
            return e.attrOrderChange_;
          }
        }
      ]),
      e
    );
  })());
  (rt.animationElement_ = document.createElement("div")),
    (rt.animationEventName_ = void 0),
    (rt.attrOrderChange_ = void 0);
  const it = (function() {
    function e() {
      ge(this, e);
    }
    return (
      ke(e, null, [
        {
          key: "run",
          value(e, t) {
            const n = document.createElement("script");
            return (
              (n.text = e), t ? t(n) : document.head.appendChild(n), M(n), n
            );
          }
        },
        {
          key: "runFile",
          value(e, t, n) {
            const r = document.createElement("script");
            r.src = e;
            const i = function() {
              M(r), t && t();
            };
            return (
              J(r, "load", i),
              J(r, "error", i),
              n ? n(r) : document.head.appendChild(r),
              r
            );
          }
        },
        {
          key: "runScript",
          value(t, n, r) {
            const i = function() {
              n && n();
            };
            return t.type && t.type !== "text/javascript"
              ? void Te.nextTick(i)
              : (M(t),
                t.src
                  ? e.runFile(t.src, n, r)
                  : (Te.nextTick(i), e.run(t.text, r)));
          }
        },
        {
          key: "runScriptsInElement",
          value(t, n, r) {
            const i = t.querySelectorAll("script");
            i.length ? e.runScriptsInOrder(i, 0, n, r) : n && Te.nextTick(n);
          }
        },
        {
          key: "runScriptsInOrder",
          value(t, n, r, i) {
            e.runScript(
              t.item(n),
              () => {
                n < t.length - 1
                  ? e.runScriptsInOrder(t, n + 1, r, i)
                  : r && Te.nextTick(r);
              },
              i
            );
          }
        }
      ]),
      e
    );
  })();

  const at = (function() {
    function e() {
      ge(this, e);
    }
    return (
      ke(e, null, [
        {
          key: "run",
          value(e, t) {
            const n = document.createElement("style");
            return (
              (n.innerHTML = e), t ? t(n) : document.head.appendChild(n), n
            );
          }
        },
        {
          key: "runFile",
          value(t, n, r) {
            const i = document.createElement("link");
            return (i.rel = "stylesheet"), (i.href = t), e.runStyle(i, n, r), i;
          }
        },
        {
          key: "runStyle",
          value(e, t, n) {
            const r = function() {
              t && t();
            };
            return e.rel && e.rel !== "stylesheet"
              ? void Te.nextTick(r)
              : (e.tagName === "STYLE"
                  ? Te.nextTick(r)
                  : (J(e, "load", r), J(e, "error", r)),
                n ? n(e) : document.head.appendChild(e),
                e);
          }
        },
        {
          key: "runStylesInElement",
          value(t, n, r) {
            const i = t.querySelectorAll("style,link");
            if (i.length === 0 && n) return void Te.nextTick(n);
            for (
              var a = 0,
                o = function() {
                  n && ++a === i.length && Te.nextTick(n);
                },
                s = 0;
              s < i.length;
              s++
            ) {
              e.runStyle(i[s], o, r);
            }
          }
        }
      ]),
      e
    );
  })();

  const ot = {
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  };
  Object.keys(ot).forEach(e => {
    z(e, {
      delegate: !0,
      handler(t, n) {
        const r = n.relatedTarget;

        const i = n.delegateTarget;
        if (!r || (r !== i && !x(i, r))) return (n.customType = e), t(n);
      },
      originalEvent: ot[e]
    });
  });
  const st = { animation: "animationend", transition: "transitionend" };
  Object.keys(st).forEach(e => {
    const t = st[e];
    z(t, {
      event: !0,
      delegate: !0,
      handler(e, n) {
        return (n.customType = t), e(n);
      },
      originalEvent: rt.checkAnimationEventName()[e]
    });
  });
  /*!
   * Promises polyfill from Google's Closure Library.
   *
   *      Copyright 2013 The Closure Library Authors. All Rights Reserved.
   *
   * NOTE(eduardo): Promise support is not ready on all supported browsers,
   * therefore metal-promise is temporarily using Google's promises as polyfill.
   * It supports cancellable promises and has clean and fast implementation.
   */
  const ut = function() {};
  (ut.prototype.then = function() {}),
    (ut.IMPLEMENTED_BY_PROP = "$goog_Thenable"),
    (ut.addImplementation = function(e) {
      (e.prototype.then = e.prototype.then), (e.prototype.$goog_Thenable = !0);
    }),
    (ut.isImplementedBy = function(e) {
      if (!e) return !1;
      try {
        return !!e.$goog_Thenable;
      } catch (t) {
        return !1;
      }
    });
  const lt = function(e) {
    const t = Array.prototype.slice.call(arguments, 1);
    return function() {
      const n = t.slice();
      return n.push(...arguments), e.apply(this, n);
    };
  };

  const ct = function wt(e, t) {
    (this.state_ = wt.State_.PENDING),
      (this.result_ = void 0),
      (this.parent_ = null),
      (this.callbackEntries_ = null),
      (this.executing_ = !1),
      wt.UNHANDLED_REJECTION_DELAY > 0
        ? (this.unhandledRejectionId_ = 0)
        : wt.UNHANDLED_REJECTION_DELAY === 0 &&
          (this.hadUnhandledRejection_ = !1);
    try {
      const n = this;
      e.call(
        t,
        e => {
          n.resolve_(wt.State_.FULFILLED, e);
        },
        e => {
          n.resolve_(wt.State_.REJECTED, e);
        }
      );
    } catch (r) {
      this.resolve_(wt.State_.REJECTED, r);
    }
  };
  (ct.UNHANDLED_REJECTION_DELAY = 0),
    (ct.State_ = {
      PENDING: 0,
      BLOCKED: 1,
      FULFILLED: 2,
      REJECTED: 3
    }),
    (ct.CallbackEntry_ = null),
    (ct.resolve = function(e) {
      return new ct(t => {
        t(e);
      });
    }),
    (ct.reject = function(e) {
      return new ct((t, n) => {
        n(e);
      });
    }),
    (ct.race = function(e) {
      return new ct((t, n) => {
        e.length || t(void 0);
        for (var r, i = 0; (r = e[i]); i++) r.then(t, n);
      });
    }),
    (ct.all = function(e) {
      return new ct((t, n) => {
        let r = e.length;

        const i = [];
        if (!r) return void t(i);
        for (
          var a,
            o = function(e, n) {
              r--, (i[e] = n), r === 0 && t(i);
            },
            s = function(e) {
              n(e);
            },
            u = 0;
          (a = e[u]);
          u++
        ) {
          a.then(lt(o, u), s);
        }
      });
    }),
    (ct.firstFulfilled = function(e) {
      return new ct((t, n) => {
        let r = e.length;

        const i = [];
        if (!r) return void t(void 0);
        for (
          var a,
            o = function(e) {
              t(e);
            },
            s = function(e, t) {
              r--, (i[e] = t), r === 0 && n(i);
            },
            u = 0;
          (a = e[u]);
          u++
        ) {
          a.then(o, lt(s, u));
        }
      });
    }),
    (ct.prototype.then = function(e, t, n) {
      return this.addChildPromise_(y(e) ? e : null, y(t) ? t : null, n);
    }),
    ut.addImplementation(ct),
    (ct.prototype.thenAlways = function(e, t) {
      const n = function() {
        try {
          e.call(t);
        } catch (n) {
          ct.handleRejection_.call(null, n);
        }
      };
      return (
        this.addCallbackEntry_({ child: null, onRejected: n, onFulfilled: n }),
        this
      );
    }),
    (ct.prototype.thenCatch = function(e, t) {
      return this.addChildPromise_(null, e, t);
    }),
    (ct.prototype.catch = ct.prototype.thenCatch),
    (ct.prototype.cancel = function(e) {
      this.state_ === ct.State_.PENDING &&
        Te.run(function() {
          const t = new ct.CancellationError(e);
          (t.IS_CANCELLATION_ERROR = !0), this.cancelInternal_(t);
        }, this);
    }),
    (ct.prototype.cancelInternal_ = function(e) {
      this.state_ === ct.State_.PENDING &&
        (this.parent_
          ? this.parent_.cancelChild_(this, e)
          : this.resolve_(ct.State_.REJECTED, e));
    }),
    (ct.prototype.cancelChild_ = function(e, t) {
      if (this.callbackEntries_) {
        for (var n, r = 0, i = -1, a = 0; (n = this.callbackEntries_[a]); a++) {
          const o = n.child;
          if (o && (r++, o === e && (i = a), i >= 0 && r > 1)) break;
        }
        if (i >= 0) {
          if (this.state_ === ct.State_.PENDING && r === 1) {
            this.cancelInternal_(t);
          } else {
            const s = this.callbackEntries_.splice(i, 1)[0];
            this.executeCallback_(s, ct.State_.REJECTED, t);
          }
        }
      }
    }),
    (ct.prototype.addCallbackEntry_ = function(e) {
      (this.callbackEntries_ && this.callbackEntries_.length) ||
        (this.state_ !== ct.State_.FULFILLED &&
          this.state_ !== ct.State_.REJECTED) ||
        this.scheduleCallbacks_(),
        this.callbackEntries_ || (this.callbackEntries_ = []),
        this.callbackEntries_.push(e);
    }),
    (ct.prototype.addChildPromise_ = function(e, t, n) {
      const r = { child: null, onFulfilled: null, onRejected: null };
      return (
        (r.child = new ct((i, a) => {
          (r.onFulfilled = e
            ? function(t) {
                try {
                  const r = e.call(n, t);
                  i(r);
                } catch (o) {
                  a(o);
                }
              }
            : i),
            (r.onRejected = t
              ? function(e) {
                  try {
                    const r = t.call(n, e);
                    !h(r) && e.IS_CANCELLATION_ERROR ? a(e) : i(r);
                  } catch (o) {
                    a(o);
                  }
                }
              : a);
        })),
        (r.child.parent_ = this),
        this.addCallbackEntry_(r),
        r.child
      );
    }),
    (ct.prototype.unblockAndFulfill_ = function(e) {
      if (this.state_ !== ct.State_.BLOCKED) {
        throw new Error("CancellablePromise is not blocked.");
      }
      (this.state_ = ct.State_.PENDING), this.resolve_(ct.State_.FULFILLED, e);
    }),
    (ct.prototype.unblockAndReject_ = function(e) {
      if (this.state_ !== ct.State_.BLOCKED) {
        throw new Error("CancellablePromise is not blocked.");
      }
      (this.state_ = ct.State_.PENDING), this.resolve_(ct.State_.REJECTED, e);
    }),
    (ct.prototype.resolve_ = function(e, t) {
      if (this.state_ === ct.State_.PENDING) {
        if (this === t) {
          (e = ct.State_.REJECTED),
            (t = new TypeError("CancellablePromise cannot resolve to itself"));
        } else {
          if (ut.isImplementedBy(t)) {
            return (
              (t = t),
              (this.state_ = ct.State_.BLOCKED),
              void t.then(this.unblockAndFulfill_, this.unblockAndReject_, this)
            );
          }
          if (k(t)) {
            try {
              const n = t.then;
              if (y(n)) return void this.tryThen_(t, n);
            } catch (r) {
              (e = ct.State_.REJECTED), (t = r);
            }
          }
        }
        (this.result_ = t),
          (this.state_ = e),
          this.scheduleCallbacks_(),
          e !== ct.State_.REJECTED ||
            t.IS_CANCELLATION_ERROR ||
            ct.addUnhandledRejection_(this, t);
      }
    }),
    (ct.prototype.tryThen_ = function(e, t) {
      this.state_ = ct.State_.BLOCKED;
      const n = this;

      let r = !1;

      const i = function(e) {
        r || ((r = !0), n.unblockAndFulfill_(e));
      };

      const a = function(e) {
        r || ((r = !0), n.unblockAndReject_(e));
      };
      try {
        t.call(e, i, a);
      } catch (o) {
        a(o);
      }
    }),
    (ct.prototype.scheduleCallbacks_ = function() {
      this.executing_ ||
        ((this.executing_ = !0), Te.run(this.executeCallbacks_, this));
    }),
    (ct.prototype.executeCallbacks_ = function() {
      for (; this.callbackEntries_ && this.callbackEntries_.length; ) {
        const e = this.callbackEntries_;
        this.callbackEntries_ = [];
        for (let t = 0; t < e.length; t++) {
          this.executeCallback_(e[t], this.state_, this.result_);
        }
      }
      this.executing_ = !1;
    }),
    (ct.prototype.executeCallback_ = function(e, t, n) {
      t === ct.State_.FULFILLED
        ? e.onFulfilled(n)
        : (this.removeUnhandledRejection_(), e.onRejected(n));
    }),
    (ct.prototype.removeUnhandledRejection_ = function() {
      let e;
      if (ct.UNHANDLED_REJECTION_DELAY > 0) {
        for (e = this; e && e.unhandledRejectionId_; e = e.parent_) {
          clearTimeout(e.unhandledRejectionId_), (e.unhandledRejectionId_ = 0);
        }
      } else if (ct.UNHANDLED_REJECTION_DELAY === 0) {
        for (e = this; e && e.hadUnhandledRejection_; e = e.parent_) {
          e.hadUnhandledRejection_ = !1;
        }
      }
    }),
    (ct.addUnhandledRejection_ = function(e, t) {
      ct.UNHANDLED_REJECTION_DELAY > 0
        ? (e.unhandledRejectionId_ = setTimeout(() => {
            ct.handleRejection_.call(null, t);
          }, ct.UNHANDLED_REJECTION_DELAY))
        : ct.UNHANDLED_REJECTION_DELAY === 0 &&
          ((e.hadUnhandledRejection_ = !0),
          Te.run(() => {
            e.hadUnhandledRejection_ && ct.handleRejection_.call(null, t);
          }));
    }),
    (ct.handleRejection_ = Te.throwException),
    (ct.setUnhandledRejectionHandler = function(e) {
      ct.handleRejection_ = e;
    }),
    (ct.CancellationError = (function(e) {
      function t(e) {
        ge(this, t);
        const n = be(
          this,
          (t.__proto__ || Object.getPrototypeOf(t)).call(this, e)
        );
        return e && (n.message = e), n;
      }
      return Se(t, e), t;
    })(Error)),
    (ct.CancellationError.prototype.name = "cancel");
  var ht = /([\/])?(?:(?:\:(\w+)(?:\(((?:\\.|[^\\()])*)\))?|\(((?:\\.|[^\\()])+)\))([+*?])?)/g;

  const ft = (function() {
    function e(t, n) {
      if ((ge(this, e), !f(t))) throw new Error("Route path not specified.");
      if (!y(n)) throw new Error("Route handler is not a function.");
      (this.handler = n), (this.path = t);
    }
    return (
      ke(e, [
        {
          key: "buildParsedData_",
          value() {
            if (!this.parsedData_) {
              const e = ve(this.path);

              const t = pe(e);
              this.parsedData_ = { regex: t, tokens: e };
            }
            return this.parsedData_;
          }
        },
        {
          key: "extractParams",
          value(e) {
            return S(this.path) ? ye(this.buildParsedData_().tokens, e) : {};
          }
        },
        {
          key: "getHandler",
          value() {
            return this.handler;
          }
        },
        {
          key: "getPath",
          value() {
            return this.path;
          }
        },
        {
          key: "matchesPath",
          value(e) {
            let t = this.path;
            return y(t)
              ? t(e)
              : (S(t) && (t = this.buildParsedData_().regex),
                t instanceof RegExp && e.search(t) > -1);
          }
        }
      ]),
      e
    );
  })();

  const dt = (function(e) {
    function t() {
      ge(this, t);
      const e = be(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
      return (e.cache = null), (e.cacheable = !1), e;
    }
    return (
      Se(t, e),
      ke(t, [
        {
          key: "addCache",
          value(e) {
            return this.cacheable && (this.cache = e), this;
          }
        },
        {
          key: "clearCache",
          value() {
            return (this.cache = null), this;
          }
        },
        {
          key: "disposeInternal",
          value() {
            this.clearCache();
          }
        },
        {
          key: "getCache",
          value() {
            return this.cache;
          }
        },
        {
          key: "isCacheable",
          value() {
            return this.cacheable;
          }
        },
        {
          key: "setCacheable",
          value(e) {
            e || this.clearCache(), (this.cacheable = e);
          }
        }
      ]),
      t
    );
  })(Oe);

  const vt = (function(e) {
    function t() {
      ge(this, t);
      const e = be(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
      return (e.id = e.makeId_(u())), (e.title = null), e;
    }
    return (
      Se(t, e),
      ke(t, [
        { key: "activate", value() {} },
        { key: "beforeDeactivate", value() {} },
        {
          key: "beforeUpdateHistoryPath",
          value(e) {
            return e;
          }
        },
        {
          key: "beforeUpdateHistoryState",
          value(e) {
            return e;
          }
        },
        { key: "deactivate", value() {} },
        {
          key: "disposeInternal",
          value() {
            Ee(
              t.prototype.__proto__ || Object.getPrototypeOf(t.prototype),
              "disposeInternal",
              this
            ).call(this);
          }
        },
        {
          key: "evaluateScripts",
          value(e) {
            return (
              Object.keys(e).forEach(t => {
                e[t].activeChild && it.runScriptsInElement(e[t].activeChild);
              }),
              ct.resolve()
            );
          }
        },
        {
          key: "evaluateStyles",
          value() {
            return ct.resolve();
          }
        },
        {
          key: "flip",
          value(e) {
            const t = this;

            const n = [];
            return (
              Object.keys(e).forEach(r => {
                const i = e[r];

                const a = i.show(t.id);
                n.push(a);
              }),
              ct.all(n)
            );
          }
        },
        {
          key: "getId",
          value() {
            return this.id;
          }
        },
        { key: "getSurfaceContent", value() {} },
        {
          key: "getTitle",
          value() {
            return this.title;
          }
        },
        {
          key: "load",
          value() {
            return ct.resolve();
          }
        },
        {
          key: "makeId_",
          value(e) {
            return `screen_${e}`;
          }
        },
        {
          key: "setId",
          value(e) {
            this.id = e;
          }
        },
        {
          key: "setTitle",
          value(e) {
            this.title = e;
          }
        },
        {
          key: "toString",
          value() {
            return this.id;
          }
        }
      ]),
      t
    );
  })(dt);
  vt.isImplementedBy = function(e) {
    return e instanceof vt;
  };
  const pt = (function(e) {
    function t(e) {
      ge(this, t);
      const n = be(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
      if (!e) {
        throw new Error(
          "Surface element id not specified. A surface element requires a valid id."
        );
      }
      return (
        (n.activeChild = null),
        (n.defaultChild = null),
        (n.element = null),
        (n.id = e),
        (n.transitionFn = null),
        (n.defaultChild = n.getChild(t.DEFAULT)),
        n.maybeWrapContentAsDefault_(),
        (n.activeChild = n.defaultChild),
        n
      );
    }
    return (
      Se(t, e),
      ke(t, [
        {
          key: "addContent",
          value(e, t) {
            let n = this.defaultChild;
            f(t) &&
              ((n = this.getChild(e)),
              n ? G(n) : ((n = this.createChild(e)), this.transition(n, null)),
              H(n, t));
            const r = this.getElement();
            return r && n && H(r, n), n;
          }
        },
        {
          key: "createChild",
          value(e) {
            const t = me.document.createElement("div");
            return t.setAttribute("id", this.makeId_(e)), t;
          }
        },
        {
          key: "getChild",
          value(e) {
            return me.document.getElementById(this.makeId_(e));
          }
        },
        {
          key: "getElement",
          value() {
            return this.element
              ? this.element
              : ((this.element = me.document.getElementById(this.id)),
                this.element);
          }
        },
        {
          key: "getId",
          value() {
            return this.id;
          }
        },
        {
          key: "getTransitionFn",
          value() {
            return this.transitionFn;
          }
        },
        {
          key: "makeId_",
          value(e) {
            return `${this.id}-${e}`;
          }
        },
        {
          key: "maybeWrapContentAsDefault_",
          value() {
            const e = this.getElement();
            if (e && !this.defaultChild) {
              for (
                var n = me.document.createDocumentFragment();
                e.firstChild;

              ) {
                n.appendChild(e.firstChild);
              }
              (this.defaultChild = this.addContent(t.DEFAULT, n)),
                this.transition(null, this.defaultChild);
            }
          }
        },
        {
          key: "setId",
          value(e) {
            this.id = e;
          }
        },
        {
          key: "setTransitionFn",
          value(e) {
            this.transitionFn = e;
          }
        },
        {
          key: "show",
          value(e) {
            const t = this.activeChild;

            let n = this.getChild(e);
            return (
              n || (n = this.defaultChild),
              (this.activeChild = n),
              this.transition(t, n).thenAlways(() => {
                t && t !== n && M(t);
              })
            );
          }
        },
        {
          key: "remove",
          value(e) {
            const t = this.getChild(e);
            t && M(t);
          }
        },
        {
          key: "toString",
          value() {
            return this.id;
          }
        },
        {
          key: "transition",
          value(e, n) {
            const r = this.transitionFn || t.defaultTransition;
            return ct.resolve(r.call(this, e, n));
          }
        }
      ]),
      t
    );
  })(Oe);
  (pt.DEFAULT = "default"),
    (pt.defaultTransition = function(e, t) {
      e && ((e.style.display = "none"), e.classList.remove("flipped")),
        t && ((t.style.display = "block"), t.classList.add("flipped"));
    });
  const yt = (function(e) {
    function t() {
      ge(this, t);
      const e = be(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
      return (
        (e.activeScreen = null),
        (e.activePath = null),
        (e.allowPreventNavigate = !0),
        (e.basePath = ""),
        (e.browserPathBeforeNavigate = qe.getCurrentBrowserPathWithoutHash()),
        (e.captureScrollPositionFromScrollEvent = !0),
        (e.defaultTitle = me.document.title),
        (e.formSelector =
          'form[enctype="multipart/form-data"]:not([data-senna-off])'),
        (e.ignoreQueryStringFromRoutePath = !1),
        (e.linkSelector = "a:not([data-senna-off])"),
        (e.loadingCssClass = "senna-loading"),
        (e.nativeScrollRestorationSupported =
          "scrollRestoration" in me.window.history),
        (e.isNavigationPending = !1),
        (e.pendingNavigate = null),
        (e.popstateScrollLeft = 0),
        (e.popstateScrollTop = 0),
        (e.redirectPath = null),
        (e.routes = []),
        (e.screens = {}),
        (e.skipLoadPopstate = !1),
        (e.surfaces = {}),
        (e.updateScrollPosition = !0),
        (e.appEventHandlers_ = new Ge()),
        e.appEventHandlers_.add(
          W(me.window, "scroll", se(e.onScroll_.bind(e), 100)),
          W(me.window, "load", e.onLoad_.bind(e)),
          W(me.window, "popstate", e.onPopstate_.bind(e))
        ),
        e.on("startNavigate", e.onStartNavigate_),
        e.on("beforeNavigate", e.onBeforeNavigate_),
        e.on("beforeNavigate", e.onBeforeNavigateDefault_, !0),
        e.setLinkSelector(e.linkSelector),
        e.setFormSelector(e.formSelector),
        e
      );
    }
    return (
      Se(t, e),
      ke(t, [
        {
          key: "addRoutes",
          value(e) {
            const t = this;
            return (
              Array.isArray(e) || (e = [e]),
              e.forEach(e => {
                e instanceof ft || (e = new ft(e.path, e.handler)),
                  t.routes.push(e);
              }),
              this
            );
          }
        },
        {
          key: "addSurfaces",
          value(e) {
            const t = this;
            return (
              Array.isArray(e) || (e = [e]),
              e.forEach(e => {
                S(e) && (e = new pt(e)), (t.surfaces[e.getId()] = e);
              }),
              this
            );
          }
        },
        {
          key: "canNavigate",
          value(e) {
            const t = qe.isWebUri(e);
            if (!t) return !1;
            const n = qe.getUrlPath(e);
            return (
              !!this.isLinkSameOrigin_(t.getHostname()) &&
              (!!this.isSameBasePath_(n) &&
                ((!t.getHash() || !qe.isCurrentBrowserPath(n)) &&
                  !!this.findRoute(n)))
            );
          }
        },
        {
          key: "clearScreensCache",
          value() {
            const e = this;
            Object.keys(this.screens).forEach(t => {
              t === e.activePath
                ? e.activeScreen.clearCache()
                : e.removeScreen(t);
            });
          }
        },
        {
          key: "createScreenInstance",
          value(e, t) {
            if (!this.pendingNavigate && e === this.activePath) {
              return this.activeScreen;
            }
            let n = this.screens[e];
            if (!n) {
              const r = t.getHandler();
              n =
                r === vt || vt.isImplementedBy(r.prototype)
                  ? new r()
                  : r(t) || new vt();
            }
            return n;
          }
        },
        {
          key: "disposeInternal",
          value() {
            this.activeScreen && this.removeScreen(this.activePath),
              this.clearScreensCache(),
              this.formEventHandler_.removeListener(),
              this.linkEventHandler_.removeListener(),
              this.appEventHandlers_.removeAllListeners(),
              Ee(
                t.prototype.__proto__ || Object.getPrototypeOf(t.prototype),
                "disposeInternal",
                this
              ).call(this);
          }
        },
        {
          key: "dispatch",
          value() {
            return this.navigate(qe.getCurrentBrowserPath(), !0);
          }
        },
        {
          key: "doNavigate_",
          value(e, t) {
            const n = this;
            if (this.activeScreen && this.activeScreen.beforeDeactivate()) {
              return (
                (this.pendingNavigate = ct.reject(
                  new ct.CancellationError("Cancelled by active screen")
                )),
                this.pendingNavigate
              );
            }
            const r = this.findRoute(e);
            if (!r) {
              return (
                (this.pendingNavigate = ct.reject(
                  new ct.CancellationError(`No route for ${e}`)
                )),
                this.pendingNavigate
              );
            }
            this.stopPendingNavigate_(), (this.isNavigationPending = !0);
            const i = this.createScreenInstance(e, r);
            return i
              .load(e)
              .then(() => {
                n.activeScreen && n.activeScreen.deactivate(),
                  n.prepareNavigateHistory_(e, i, t),
                  n.prepareNavigateSurfaces_(
                    i,
                    n.surfaces,
                    n.extractParams(r, e)
                  );
              })
              .then(() => i.evaluateStyles(n.surfaces))
              .then(() => i.flip(n.surfaces))
              .then(() => i.evaluateScripts(n.surfaces))
              .then(() => n.maybeUpdateScrollPositionState_())
              .then(() => n.syncScrollPositionSyncThenAsync_())
              .then(() => n.finalizeNavigate_(e, i))
              .catch(t => {
                throw ((n.isNavigationPending = !1),
                n.handleNavigateError_(e, i, t),
                t);
              });
          }
        },
        {
          key: "extractParams",
          value(e, t) {
            return e.extractParams(this.getRoutePath(t));
          }
        },
        {
          key: "finalizeNavigate_",
          value(e, t) {
            t.activate(),
              this.activeScreen &&
                !this.activeScreen.isCacheable() &&
                this.activeScreen !== t &&
                this.removeScreen(this.activePath),
              (this.activePath = e),
              (this.activeScreen = t),
              (this.browserPathBeforeNavigate = qe.getCurrentBrowserPathWithoutHash()),
              (this.screens[e] = t),
              (this.isNavigationPending = !1),
              (this.pendingNavigate = null),
              (me.capturedFormElement = null),
              (me.capturedFormButtonElement = null);
          }
        },
        {
          key: "findRoute",
          value(e) {
            e = this.getRoutePath(e);
            for (let t = 0; t < this.routes.length; t++) {
              const n = this.routes[t];
              if (n.matchesPath(e)) return n;
            }
            return null;
          }
        },
        {
          key: "getAllowPreventNavigate",
          value() {
            return this.allowPreventNavigate;
          }
        },
        {
          key: "getBasePath",
          value() {
            return this.basePath;
          }
        },
        {
          key: "getDefaultTitle",
          value() {
            return this.defaultTitle;
          }
        },
        {
          key: "getFormSelector",
          value() {
            return this.formSelector;
          }
        },
        {
          key: "getIgnoreQueryStringFromRoutePath",
          value() {
            return this.ignoreQueryStringFromRoutePath;
          }
        },
        {
          key: "getLinkSelector",
          value() {
            return this.linkSelector;
          }
        },
        {
          key: "getLoadingCssClass",
          value() {
            return this.loadingCssClass;
          }
        },
        {
          key: "getRoutePath",
          value(e) {
            return this.getIgnoreQueryStringFromRoutePath()
              ? ((e = qe.getUrlPathWithoutHashAndSearch(e)),
                qe.getUrlPathWithoutHashAndSearch(
                  e.substr(this.basePath.length)
                ))
              : ((e = qe.getUrlPathWithoutHash(e)),
                qe.getUrlPathWithoutHash(e.substr(this.basePath.length)));
          }
        },
        {
          key: "getUpdateScrollPosition",
          value() {
            return this.updateScrollPosition;
          }
        },
        {
          key: "handleNavigateError_",
          value(e, t, n) {
            const r = this;
            qe.isCurrentBrowserPath(e) ||
              (this.isNavigationPending && this.pendingNavigate
                ? this.pendingNavigate.thenAlways(() => r.removeScreen(e), this)
                : this.removeScreen(e));
          }
        },
        {
          key: "hasRoutes",
          value() {
            return this.routes.length > 0;
          }
        },
        {
          key: "isLinkSameOrigin_",
          value(e) {
            return e === me.window.location.hostname;
          }
        },
        {
          key: "isSameBasePath_",
          value(e) {
            return e.indexOf(this.basePath) === 0;
          }
        },
        {
          key: "lockHistoryScrollPosition_",
          value() {
            const e = me.window.history.state;
            if (e) {
              let t = !1;

              const n = function r() {
                me.document.removeEventListener("scroll", r, !1),
                  t ||
                    (me.window.scrollTo(e.scrollLeft, e.scrollTop), (t = !0));
              };
              Te.nextTick(n), me.document.addEventListener("scroll", n, !1);
            }
          }
        },
        {
          key: "maybeDisableNativeScrollRestoration",
          value() {
            this.nativeScrollRestorationSupported &&
              ((this.nativeScrollRestoration_ =
                me.window.history.scrollRestoration),
              (me.window.history.scrollRestoration = "manual"));
          }
        },
        {
          key: "maybeNavigate_",
          value(e, t) {
            if (this.canNavigate(e)) {
              (me.capturedFormElement = t.capturedFormElement),
                (me.capturedFormButtonElement = t.capturedFormButtonElement);
              let n = !1;
              try {
                this.navigate(qe.getUrlPath(e), !1, t);
              } catch (r) {
                n = !0;
              }
              n || t.preventDefault();
            }
          }
        },
        {
          key: "maybeRepositionScrollToHashedAnchor",
          value() {
            const e = me.window.location.hash;
            if (e) {
              const t = me.document.getElementById(e.substring(1));
              t && me.window.scrollTo(t.offsetLeft, t.offsetTop);
            }
          }
        },
        {
          key: "maybeRestoreNativeScrollRestoration",
          value() {
            this.nativeScrollRestorationSupported &&
              this.nativeScrollRestoration_ &&
              (me.window.history.scrollRestoration = this.nativeScrollRestoration_);
          }
        },
        {
          key: "maybeRestoreRedirectPathHash_",
          value(e, t, n) {
            return t === qe.getUrlPathWithoutHash(e) ? t + n : t;
          }
        },
        {
          key: "maybeUpdateScrollPositionState_",
          value() {
            const e = me.window.location.hash;

            const t = me.document.getElementById(e.substring(1));
            t &&
              this.saveHistoryCurrentPageScrollPosition_(
                t.offsetTop,
                t.offsetLeft
              );
          }
        },
        {
          key: "navigate",
          value(e, t, n) {
            if (!qe.isHtml5HistorySupported()) {
              throw new Error(
                "HTML5 History is not supported. Senna will not intercept navigation."
              );
            }
            return (
              e === this.activePath && (t = !0),
              this.emit("beforeNavigate", {
                event: n,
                path: e,
                replaceHistory: !!t
              }),
              this.pendingNavigate
            );
          }
        },
        {
          key: "onBeforeNavigate_",
          value(e) {
            me.capturedFormElement && (e.form = me.capturedFormElement);
          }
        },
        {
          key: "onBeforeNavigateDefault_",
          value(e) {
            (this.pendingNavigate && this.pendingNavigate.path === e.path) ||
              this.emit("startNavigate", {
                form: e.form,
                path: e.path,
                replaceHistory: e.replaceHistory
              });
          }
        },
        {
          key: "onDocClickDelegate_",
          value(e) {
            e.altKey ||
              e.ctrlKey ||
              e.metaKey ||
              e.shiftKey ||
              e.button ||
              this.maybeNavigate_(e.delegateTarget.href, e);
          }
        },
        {
          key: "onDocSubmitDelegate_",
          value(e) {
            const t = e.delegateTarget;
            if (t.method !== "get") {
              e.capturedFormElement = t;
              const n =
                "button:not([type]),button[type=submit],input[type=submit]";
              B(me.document.activeElement, n)
                ? (e.capturedFormButtonElement = me.document.activeElement)
                : (e.capturedFormButtonElement = t.querySelector(n)),
                this.maybeNavigate_(t.action, e);
            }
          }
        },
        {
          key: "onLoad_",
          value() {
            const e = this;
            (this.skipLoadPopstate = !0),
              setTimeout(() => {
                e.skipLoadPopstate = !1;
              }, 0),
              this.maybeRepositionScrollToHashedAnchor();
          }
        },
        {
          key: "onPopstate_",
          value(e) {
            if (!this.skipLoadPopstate) {
              if (qe.isCurrentBrowserPath(this.browserPathBeforeNavigate)) {
                return void this.maybeRepositionScrollToHashedAnchor();
              }
              const t = e.state;
              return t
                ? void (
                    t.senna &&
                    ((this.popstateScrollTop = t.scrollTop),
                    (this.popstateScrollLeft = t.scrollLeft),
                    this.nativeScrollRestorationSupported ||
                      this.lockHistoryScrollPosition_(),
                    this.navigate(t.path, !0))
                  )
                : void (me.window.location.hash
                    ? (this.redirectPath &&
                        !qe.isCurrentBrowserPath(this.redirectPath) &&
                        this.reloadPage(),
                      this.maybeRepositionScrollToHashedAnchor())
                    : this.reloadPage());
            }
          }
        },
        {
          key: "onScroll_",
          value() {
            this.captureScrollPositionFromScrollEvent &&
              this.saveHistoryCurrentPageScrollPosition_(
                me.window.pageYOffset,
                me.window.pageXOffset
              );
          }
        },
        {
          key: "onStartNavigate_",
          value(e) {
            const t = this;
            this.maybeDisableNativeScrollRestoration(),
              (this.captureScrollPositionFromScrollEvent = !1),
              A(me.document.documentElement, this.loadingCssClass);
            const n = { form: e.form, path: e.path };
            (this.pendingNavigate = this.doNavigate_(e.path, e.replaceHistory)
              .catch(e => {
                throw ((n.error = e), e);
              })
              .thenAlways(() => {
                t.pendingNavigate ||
                  (K(me.document.documentElement, t.loadingCssClass),
                  t.maybeRestoreNativeScrollRestoration(),
                  (t.captureScrollPositionFromScrollEvent = !0)),
                  t.emit("endNavigate", n);
              })),
              (this.pendingNavigate.path = e.path);
          }
        },
        {
          key: "prefetch",
          value(e) {
            const t = this;

            const n = this.findRoute(e);
            if (!n) {
              return ct.reject(new ct.CancellationError(`No route for ${e}`));
            }
            const r = this.createScreenInstance(e, n);
            return r
              .load(e)
              .then(() => (t.screens[e] = r))
              .catch(n => {
                throw (t.handleNavigateError_(e, r, n), n);
              });
          }
        },
        {
          key: "prepareNavigateHistory_",
          value(e, t, n) {
            let r = t.getTitle();
            S(r) || (r = this.getDefaultTitle());
            let i = t.beforeUpdateHistoryPath(e);

            const a = {
              form: f(me.capturedFormElement),
              path: e,
              redirectPath: i,
              scrollLeft: 0,
              scrollTop: 0,
              senna: !0
            };
            n &&
              ((a.scrollTop = this.popstateScrollTop),
              (a.scrollLeft = this.popstateScrollLeft));
            const o = new Fe(e).getHash();
            (i = this.maybeRestoreRedirectPathHash_(e, i, o)),
              this.updateHistory_(r, i, t.beforeUpdateHistoryState(a), n),
              (this.redirectPath = i);
          }
        },
        {
          key: "prepareNavigateSurfaces_",
          value(e, t, n) {
            Object.keys(t).forEach(r => {
              const i = e.getSurfaceContent(r, n);
              t[r].addContent(e.getId(), i);
            });
          }
        },
        {
          key: "reloadPage",
          value() {
            me.window.location.reload();
          }
        },
        {
          key: "removeRoute",
          value(e) {
            return Re.remove(this.routes, e);
          }
        },
        {
          key: "removeScreen",
          value(e) {
            const t = this;

            const n = this.screens[e];
            n &&
              (Object.keys(this.surfaces).forEach(e =>
                t.surfaces[e].remove(n.getId())
              ),
              n.dispose(),
              delete this.screens[e]);
          }
        },
        {
          key: "saveHistoryCurrentPageScrollPosition_",
          value(e, t) {
            const n = me.window.history.state;
            if (n && n.senna) {
              const r = [e, t];
              (n.scrollTop = r[0]),
                (n.scrollLeft = r[1]),
                me.window.history.replaceState(n, null, null);
            }
          }
        },
        {
          key: "setAllowPreventNavigate",
          value(e) {
            this.allowPreventNavigate = e;
          }
        },
        {
          key: "setBasePath",
          value(e) {
            this.basePath = qe.removePathTrailingSlash(e);
          }
        },
        {
          key: "setDefaultTitle",
          value(e) {
            this.defaultTitle = e;
          }
        },
        {
          key: "setFormSelector",
          value(e) {
            (this.formSelector = e),
              this.formEventHandler_ && this.formEventHandler_.removeListener(),
              (this.formEventHandler_ = j(
                document,
                "submit",
                this.formSelector,
                this.onDocSubmitDelegate_.bind(this),
                this.allowPreventNavigate
              ));
          }
        },
        {
          key: "setIgnoreQueryStringFromRoutePath",
          value(e) {
            this.ignoreQueryStringFromRoutePath = e;
          }
        },
        {
          key: "setLinkSelector",
          value(e) {
            (this.linkSelector = e),
              this.linkEventHandler_ && this.linkEventHandler_.removeListener(),
              (this.linkEventHandler_ = j(
                document,
                "click",
                this.linkSelector,
                this.onDocClickDelegate_.bind(this),
                this.allowPreventNavigate
              ));
          }
        },
        {
          key: "setLoadingCssClass",
          value(e) {
            this.loadingCssClass = e;
          }
        },
        {
          key: "setUpdateScrollPosition",
          value(e) {
            this.updateScrollPosition = e;
          }
        },
        {
          key: "stopPendingNavigate_",
          value() {
            this.pendingNavigate &&
              (this.pendingNavigate.cancel("Cancel pending navigation"),
              (this.pendingNavigate = null));
          }
        },
        {
          key: "syncScrollPositionSyncThenAsync_",
          value() {
            const e = this;

            const t = me.window.history.state;
            if (t) {
              const n = t.scrollTop;

              const r = t.scrollLeft;

              const i = function() {
                e.updateScrollPosition && me.window.scrollTo(r, n);
              };
              return new ct(e => i() & Te.nextTick(() => i() & e()));
            }
          }
        },
        {
          key: "updateHistory_",
          value(e, t, n, r) {
            r
              ? me.window.history.replaceState(n, e, t)
              : me.window.history.pushState(n, e, t);
            const i = me.document.querySelector("title");
            i ? (i.innerHTML = e) : (me.document.title = e);
          }
        }
      ]),
      t
    );
  })(Ye);

  const mt = (function() {
    function e() {
      ge(this, e);
    }
    return (
      ke(e, null, [
        {
          key: "parseResponseHeaders",
          value(e) {
            const t = [];
            if (!e) return t;
            for (let n = e.split("\r\n"), r = 0; r < n.length; r++) {
              const i = n[r].indexOf(": ");
              if (i > 0) {
                const a = n[r].substring(0, i);

                const o = n[r].substring(i + 2);
                t.push({ name: a, value: o });
              }
            }
            return t;
          }
        },
        {
          key: "request",
          value: function t(e, n, r, i, a, o, s, u) {
            (e = e || ""), (n = n || "GET");
            const t = new XMLHttpRequest();

            const l = new ct((e, n) => {
              (t.onload = function() {
                return t.aborted ? void t.onerror() : void e(t);
              }),
                (t.onerror = function() {
                  const e = new Error("Request error");
                  (e.request = t), n(e);
                });
            })
              .thenCatch(e => {
                throw (t.abort(), e);
              })
              .thenAlways(() => {
                clearTimeout(c);
              });
            if (
              ((e = new Fe(e)),
              a && e.addParametersFromMultiMap(a).toString(),
              (e = e.toString()),
              t.open(n, e, !s),
              u && (t.withCredentials = !0),
              i &&
                i.names().forEach(e => {
                  t.setRequestHeader(e, i.getAll(e).join(", "));
                }),
              t.send(h(r) ? r : null),
              f(o))
            ) {
              var c = setTimeout(() => {
                l.cancel("Request timeout");
              }, o);
            }
            return l;
          }
        }
      ]),
      e
    );
  })();

  const _t = function Ct() {
    ge(this, Ct);
  };
  (_t.INVALID_STATUS = "Invalid status code"),
    (_t.REQUEST_ERROR = "Request error"),
    (_t.REQUEST_TIMEOUT = "Request timeout");
  const gt = (function() {
    function e() {
      ge(this, e);
    }
    return (
      ke(e, null, [
        {
          key: "getNativeUserAgent",
          value() {
            const t = e.globals.window.navigator;
            if (t) {
              const n = t.userAgent;
              if (n) return n;
            }
            return "";
          }
        },
        {
          key: "getNativePlatform",
          value() {
            const t = e.globals.window.navigator;
            if (t) {
              const n = t.platform;
              if (n) return n;
            }
            return "";
          }
        },
        {
          key: "matchPlatform",
          value(t) {
            return e.platform.indexOf(t) !== -1;
          }
        },
        {
          key: "matchUserAgent",
          value(t) {
            return e.userAgent.indexOf(t) !== -1;
          }
        },
        {
          key: "testUserAgent",
          value() {
            const t =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "";

            const n =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : "";
            (e.userAgent = t),
              (e.platform = n),
              (e.isMac = e.matchPlatform("Mac")),
              (e.isWin = e.matchPlatform("Win")),
              (e.isOpera =
                e.matchUserAgent("Opera") || e.matchUserAgent("OPR")),
              (e.isIe =
                e.matchUserAgent("Trident") || e.matchUserAgent("MSIE")),
              (e.isEdge = e.matchUserAgent("Edge")),
              (e.isIeOrEdge = e.isIe || e.isEdge),
              (e.isChrome =
                (e.matchUserAgent("Chrome") || e.matchUserAgent("CriOS")) &&
                !e.isOpera &&
                !e.isEdge),
              (e.isSafari =
                e.matchUserAgent("Safari") &&
                !(e.isChrome || e.isOpera || e.isEdge)),
              (e.isFirefox = e.matchUserAgent("Firefox"));
          }
        }
      ]),
      e
    );
  })();
  (gt.globals = { window }),
    gt.testUserAgent(gt.getNativeUserAgent(), gt.getNativePlatform());
  const kt = (function(e) {
    function t() {
      ge(this, t);
      const e = be(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
      return (
        (e.cacheable = !0),
        (e.httpHeaders = {
          "X-PJAX": "true",
          "X-Requested-With": "XMLHttpRequest"
        }),
        (e.httpMethod = t.GET),
        (e.request = null),
        (e.timeout = 3e4),
        e
      );
    }
    return (
      Se(t, e),
      ke(t, [
        {
          key: "assertValidResponseStatusCode",
          value(e) {
            if (!this.isValidResponseStatusCode(e)) {
              const t = new Error(_t.INVALID_STATUS);
              throw ((t.invalidStatus = !0), (t.statusCode = e), t);
            }
          }
        },
        {
          key: "beforeUpdateHistoryPath",
          value(e) {
            const t = this.getRequestPath();
            return t && t !== e ? t : e;
          }
        },
        {
          key: "beforeUpdateHistoryState",
          value(e) {
            return e.senna && e.form && e.redirectPath === e.path ? null : e;
          }
        },
        {
          key: "formatLoadPath",
          value(e) {
            const n = new Fe(e);
            return (
              n.setHostname(me.window.location.hostname),
              n.setProtocol(me.window.location.protocol),
              me.window.location.port && n.setPort(me.window.location.port),
              gt.isIeOrEdge && this.httpMethod === t.GET
                ? n.makeUnique().toString()
                : n.toString()
            );
          }
        },
        {
          key: "getHttpHeaders",
          value() {
            return this.httpHeaders;
          }
        },
        {
          key: "getHttpMethod",
          value() {
            return this.httpMethod;
          }
        },
        {
          key: "getRequestPath",
          value() {
            const e = this.getRequest();
            if (e) {
              let n = e.requestPath;

              const r = this.maybeExtractResponseUrlFromRequest(e);
              return (
                r && (n = r),
                gt.isIeOrEdge &&
                  this.httpMethod === t.GET &&
                  (n = new Fe(n).removeUnique().toString()),
                qe.getUrlPath(n)
              );
            }
            return null;
          }
        },
        {
          key: "getRequest",
          value() {
            return this.request;
          }
        },
        {
          key: "getTimeout",
          value() {
            return this.timeout;
          }
        },
        {
          key: "isValidResponseStatusCode",
          value(e) {
            return e >= 200 && e <= 399;
          }
        },
        {
          key: "load",
          value(e) {
            const n = this;

            const r = this.getCache();
            if (f(r)) return ct.resolve(r);
            let i = null;

            let a = this.httpMethod;

            const o = new He();
            Object.keys(this.httpHeaders).forEach(e =>
              o.add(e, n.httpHeaders[e])
            ),
              me.capturedFormElement &&
                ((i = new FormData(me.capturedFormElement)),
                this.maybeAppendSubmitButtonValue(i),
                (a = t.POST),
                gt.isIeOrEdge && o.add("If-None-Match", '"0"'));
            const s = this.formatLoadPath(e);
            return mt
              .request(s, a, i, o, null, this.timeout)
              .then(
                e => (
                  n.setRequest(e),
                  n.assertValidResponseStatusCode(e.status),
                  a === t.GET && n.isCacheable() && n.addCache(e.responseText),
                  (e.requestPath = s),
                  e.responseText
                )
              )
              .catch(e => {
                switch (e.message) {
                  case _t.REQUEST_TIMEOUT:
                    e.timeout = !0;
                    break;
                  case _t.REQUEST_ERROR:
                    e.requestError = !0;
                }
                throw e;
              });
          }
        },
        {
          key: "maybeAppendSubmitButtonValue",
          value(e) {
            const t = me.capturedFormButtonElement;
            t && t.name && e.append(t.name, t.value);
          }
        },
        {
          key: "maybeExtractResponseUrlFromRequest",
          value(e) {
            const n = e.responseURL;
            return n || e.getResponseHeader(t.X_REQUEST_URL_HEADER);
          }
        },
        {
          key: "setHttpHeaders",
          value(e) {
            this.httpHeaders = e;
          }
        },
        {
          key: "setHttpMethod",
          value(e) {
            this.httpMethod = e.toLowerCase();
          }
        },
        {
          key: "setRequest",
          value(e) {
            this.request = e;
          }
        },
        {
          key: "setTimeout",
          value(e) {
            this.timeout = e;
          }
        }
      ]),
      t
    );
  })(vt);
  (kt.GET = "get"),
    (kt.POST = "post"),
    (kt.X_REQUEST_URL_HEADER = "X-Request-URL");
  const Et = (function(e) {
    function t() {
      ge(this, t);
      const e = be(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
      return (e.titleSelector = "title"), e;
    }
    return (
      Se(t, e),
      ke(t, [
        {
          key: "activate",
          value() {
            Ee(
              t.prototype.__proto__ || Object.getPrototypeOf(t.prototype),
              "activate",
              this
            ).call(this),
              this.releaseVirtualDocument(),
              (this.pendingStyles = null);
          }
        },
        {
          key: "allocateVirtualDocumentForContent",
          value(e) {
            this.virtualDocument ||
              (this.virtualDocument = me.document.createElement("html")),
              this.copyNodeAttributesFromContent_(e, this.virtualDocument),
              (this.virtualDocument.innerHTML = e);
          }
        },
        {
          key: "appendStyleIntoDocument_",
          value(e) {
            const n = B(e, t.selectors.stylesTemporary);
            if ((n && this.pendingStyles.push(e), e.id)) {
              const r = me.document.getElementById(e.id);
              if (r) return void r.parentNode.insertBefore(e, r.nextSibling);
            }
            me.document.head.appendChild(e);
          }
        },
        {
          key: "assertSameBodyIdInVirtualDocument",
          value() {
            const e = this.virtualDocument.querySelector("body");
            me.document.body.id ||
              (me.document.body.id = `senna_surface_${u()}`),
              e && (e.id = me.document.body.id);
          }
        },
        {
          key: "copyNodeAttributesFromContent_",
          value(e, t) {
            (e = e.replace(/[<]\s*html/gi, "<senna")),
              (e = e.replace(/\/html\s*\>/gi, "/senna>")),
              (t.innerHTML = e);
            const n = t.querySelector("senna");
            n && (qe.clearNodeAttributes(t), qe.copyNodeAttributes(n, t));
          }
        },
        {
          key: "disposeInternal",
          value() {
            this.disposePendingStyles(),
              Ee(
                t.prototype.__proto__ || Object.getPrototypeOf(t.prototype),
                "disposeInternal",
                this
              ).call(this);
          }
        },
        {
          key: "disposePendingStyles",
          value() {
            this.pendingStyles && this.pendingStyles.forEach(e => M(e));
          }
        },
        {
          key: "evaluateScripts",
          value(e) {
            const n = this;

            const r = this.evaluateTrackedResources_(
              it.runScriptsInElement,
              t.selectors.scripts,
              t.selectors.scriptsTemporary,
              t.selectors.scriptsPermanent
            );
            return r.then(() =>
              Ee(
                t.prototype.__proto__ || Object.getPrototypeOf(t.prototype),
                "evaluateScripts",
                n
              ).call(n, e)
            );
          }
        },
        {
          key: "evaluateStyles",
          value(e) {
            const n = this;
            this.pendingStyles = [];
            const r = this.evaluateTrackedResources_(
              at.runStylesInElement,
              t.selectors.styles,
              t.selectors.stylesTemporary,
              t.selectors.stylesPermanent,
              this.appendStyleIntoDocument_.bind(this)
            );
            return r.then(() =>
              Ee(
                t.prototype.__proto__ || Object.getPrototypeOf(t.prototype),
                "evaluateStyles",
                n
              ).call(n, e)
            );
          }
        },
        {
          key: "evaluateTrackedResources_",
          value(e, n, r, i, a) {
            const o = this;

            const s = this.virtualQuerySelectorAll_(n);

            const u = this.querySelectorAll_(r);

            const l = this.querySelectorAll_(i);
            l.forEach(e => {
              const n = o.getResourceKey_(e);
              n && (t.permanentResourcesInDoc[n] = !0);
            });
            const c = U();
            return (
              s.forEach(e => {
                const n = o.getResourceKey_(e);
                t.permanentResourcesInDoc[n] || c.appendChild(e),
                  n && B(e, i) && (t.permanentResourcesInDoc[n] = !0);
              }),
              new ct(t => {
                e(
                  c,
                  () => {
                    u.forEach(e => M(e)), t();
                  },
                  a
                );
              })
            );
          }
        },
        {
          key: "flip",
          value(e) {
            const n = this;
            return Ee(
              t.prototype.__proto__ || Object.getPrototypeOf(t.prototype),
              "flip",
              this
            )
              .call(this, e)
              .then(() => {
                qe.clearNodeAttributes(document.documentElement),
                  qe.copyNodeAttributes(
                    n.virtualDocument,
                    document.documentElement
                  );
              });
          }
        },
        {
          key: "getResourceKey_",
          value(e) {
            return e.id || e.href || e.src || "";
          }
        },
        {
          key: "getSurfaceContent",
          value(e) {
            const t = this.virtualDocument.querySelector(`#${e}`);
            if (t) {
              const n = t.querySelector(`#${e}-${pt.DEFAULT}`);
              return n ? n.innerHTML : t.innerHTML;
            }
          }
        },
        {
          key: "getTitleSelector",
          value() {
            return this.titleSelector;
          }
        },
        {
          key: "load",
          value(e) {
            const n = this;
            return Ee(
              t.prototype.__proto__ || Object.getPrototypeOf(t.prototype),
              "load",
              this
            )
              .call(this, e)
              .then(
                e => (
                  n.allocateVirtualDocumentForContent(e),
                  n.resolveTitleFromVirtualDocument(),
                  n.assertSameBodyIdInVirtualDocument(),
                  gt.isIe && n.makeTemporaryStylesHrefsUnique_(),
                  e
                )
              );
          }
        },
        {
          key: "makeTemporaryStylesHrefsUnique_",
          value() {
            const e = this;

            const n = this.virtualQuerySelectorAll_(
              t.selectors.stylesTemporary
            );
            n.forEach(t => e.replaceStyleAndMakeUnique_(t));
          }
        },
        {
          key: "replaceStyleAndMakeUnique_",
          value(e) {
            if (e.href) {
              const t = me.document.createElement(e.tagName);
              (e.href = new Fe(e.href).makeUnique().toString()),
                qe.copyNodeAttributes(e, t),
                e.parentNode.replaceChild(t, e),
                (e.disabled = !0);
            }
          }
        },
        {
          key: "virtualQuerySelectorAll_",
          value(e) {
            return Array.prototype.slice.call(
              this.virtualDocument.querySelectorAll(e)
            );
          }
        },
        {
          key: "querySelectorAll_",
          value(e) {
            return Array.prototype.slice.call(me.document.querySelectorAll(e));
          }
        },
        {
          key: "releaseVirtualDocument",
          value() {
            this.virtualDocument = null;
          }
        },
        {
          key: "resolveTitleFromVirtualDocument",
          value() {
            const e = this.virtualDocument.querySelector(this.titleSelector);
            e && this.setTitle(e.textContent.trim());
          }
        },
        {
          key: "setTitleSelector",
          value(e) {
            this.titleSelector = e;
          }
        }
      ]),
      t
    );
  })(kt);
  (Et.selectors = {
    scripts: "script[data-senna-track]",
    scriptsPermanent: 'script[data-senna-track="permanent"]',
    scriptsTemporary: 'script[data-senna-track="temporary"]',
    styles: "style[data-senna-track],link[data-senna-track]",
    stylesPermanent:
      'style[data-senna-track="permanent"],link[data-senna-track="permanent"]',
    stylesTemporary:
      'style[data-senna-track="temporary"],link[data-senna-track="temporary"]'
  }),
    (Et.permanentResourcesInDoc = {});
  const St = (function(e) {
    function t() {
      ge(this, t);
      const e = be(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
      return (e.app = null), (e.baseElement = null), e;
    }
    return (
      Se(t, e),
      ke(t, [
        {
          key: "handle",
          value() {
            if (!p(this.baseElement)) {
              throw new Error(
                "Senna data attribute handler base element not set or invalid, try setting a valid element that contains a `data-senna` attribute."
              );
            }
            if (this.baseElement.hasAttribute(Be.senna)) {
              if (this.app) {
                throw new Error("Senna app was already initialized.");
              }
              (this.app = new yt()),
                this.maybeAddRoutes_(),
                this.maybeAddSurfaces_(),
                this.maybeSetBasePath_(),
                this.maybeSetLinkSelector_(),
                this.maybeSetLoadingCssClass_(),
                this.maybeSetUpdateScrollPosition_(),
                this.maybeDispatch_();
            }
          }
        },
        {
          key: "disposeInternal",
          value() {
            this.app && this.app.dispose();
          }
        },
        {
          key: "getApp",
          value() {
            return this.app;
          }
        },
        {
          key: "getBaseElement",
          value() {
            return this.baseElement;
          }
        },
        {
          key: "maybeAddRoutes_",
          value() {
            const e = this;

            const t = 'link[rel="senna-route"]';
            this.querySelectorAllAsArray_(t).forEach(t =>
              e.maybeParseLinkRoute_(t)
            ),
              this.app.hasRoutes() || this.app.addRoutes(new ft(/.*/, Et));
          }
        },
        {
          key: "maybeAddSurfaces_",
          value() {
            const e = this;

            const t = `[${Be.surface}]`;
            this.querySelectorAllAsArray_(t).forEach(t => {
              e.updateElementIdIfSpecialSurface_(t), e.app.addSurfaces(t.id);
            });
          }
        },
        {
          key: "maybeDispatch_",
          value() {
            this.baseElement.hasAttribute(Be.dispatch) && this.app.dispatch();
          }
        },
        {
          key: "maybeParseLinkRoute_",
          value(e) {
            const t = new ft(
              this.maybeParseLinkRoutePath_(e),
              this.maybeParseLinkRouteHandler_(e)
            );
            this.app.addRoutes(t);
          }
        },
        {
          key: "maybeParseLinkRouteHandler_",
          value(e) {
            let t = e.getAttribute("type");
            return f(t) && (t = Ne.getObjectByName(t)), t;
          }
        },
        {
          key: "maybeParseLinkRoutePath_",
          value(e) {
            let t = e.getAttribute("href");
            return (
              f(t) &&
                t.indexOf("regex:") === 0 &&
                (t = new RegExp(t.substring(6))),
              t
            );
          }
        },
        {
          key: "maybeSetBasePath_",
          value() {
            const e = this.baseElement.getAttribute(Be.basePath);
            f(e) && this.app.setBasePath(e);
          }
        },
        {
          key: "maybeSetLinkSelector_",
          value() {
            const e = this.baseElement.getAttribute(Be.linkSelector);
            f(e) && this.app.setLinkSelector(e);
          }
        },
        {
          key: "maybeSetLoadingCssClass_",
          value() {
            const e = this.baseElement.getAttribute(Be.loadingCssClass);
            f(e) && this.app.setLoadingCssClass(e);
          }
        },
        {
          key: "maybeSetUpdateScrollPosition_",
          value() {
            const e = this.baseElement.getAttribute(Be.updateScrollPosition);
            f(e) &&
              (e === "false"
                ? this.app.setUpdateScrollPosition(!1)
                : this.app.setUpdateScrollPosition(!0));
          }
        },
        {
          key: "querySelectorAllAsArray_",
          value(e) {
            return Array.prototype.slice.call(me.document.querySelectorAll(e));
          }
        },
        {
          key: "updateElementIdIfSpecialSurface_",
          value(e) {
            e.id || e !== me.document.body || (e.id = `senna_surface_${u()}`);
          }
        },
        {
          key: "setBaseElement",
          value(e) {
            this.baseElement = e;
          }
        }
      ]),
      t
    );
  })(Oe);

  const bt = new St();
  me.document.addEventListener("DOMContentLoaded", () => {
    bt.setBaseElement(me.document.body), bt.handle();
  }),
    (e.default = yt),
    (e.dataAttributeHandler = bt),
    (e.utils = qe),
    (e.App = yt),
    (e.HtmlScreen = Et),
    (e.Route = ft),
    (e.RequestScreen = kt),
    (e.Screen = vt),
    Object.defineProperty(e, "__esModule", { value: !0 });
});
